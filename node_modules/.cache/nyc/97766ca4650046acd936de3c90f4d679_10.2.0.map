{"version":3,"sources":["merge.js"],"names":["merge","m1","m2","__data__"],"mappings":";;;;;;;;;AAEA;;AACA;;;;;;AAGA;;;;;;;;;;AAUO,IAAMA,wBACX,SADWA,KACX,CAACC,EAAD,EAAKC,EAAL;AAAA,SAAY,+BAAQD,GAAGE,QAAX,EAAwBD,GAAGC,QAA3B,EAAZ;AAAA,CADK;;kBAIQ,kBAAMH,KAAN,C","file":"merge.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/map","sourcesContent":["// @flow\nimport type { Map } from '../consts/types'\nimport { curry }    from '../utils/curry'\nimport of           from './of'\n\n\n/**\n * merges two immutable maps. if the two maps contain a key\n * that is the same, the second maps value will be used\n *\n * @name map.merge\n * @param  {Map} m1 to merge onto\n * @param  {Map} m2 to merge with\n * @return {Map} of merged maps\n * @since 0.0.1\n */\nexport const merge: (m1: Map, m2: Map) => Map =\n  (m1, m2) => of({ ...m1.__data__, ...m2.__data__ })\n\n\nexport default curry(merge)\n"]}