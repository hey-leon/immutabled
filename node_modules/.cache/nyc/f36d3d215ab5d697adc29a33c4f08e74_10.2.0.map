{"version":3,"sources":["every.js"],"names":["every","l","f","Array","prototype","call","__data__"],"mappings":";;;;;;;AAEA;;AAGA;;;;;;;;;;;AAWO,IAAMA,wBACX,SADWA,KACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,MAAMC,SAAN,CAAgBJ,KAAhB,CAAsBK,IAAtB,CAA2BJ,EAAEK,QAA7B,EAAuCJ,CAAvC,CAAV;AAAA,CADK;;kBAIQ,kBAAMF,KAAN,C","file":"every.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\n\n\n/**\n * tests all entities against the predicate, until\n * one returns false. if one returns false list.every\n * returns false, else true.\n *\n * @name list.every\n * @param  {List} l to check if every\n * @param  {Func} f to be predicate\n * @return {boolean} if predicate returns true for all entities\n * @since 0.0.1\n */\nexport const every: (l: List, f: Func) => boolean =\n  (l, f) => Array.prototype.every.call(l.__data__, f)\n\n\nexport default curry(every)\n\n"]}