'use strict';var cov_1gx0aazog5=function(){var path='/Users/leon/Development/Javascript/immut/source/list/fold.js',hash='bf04e33ea99217e307536371574b942759ae0bc5',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/leon/Development/Javascript/immut/source/list/fold.js',statementMap:{'0':{start:{line:3,column:0},end:{line:5,column:3}},'1':{start:{line:6,column:0},end:{line:6,column:25}},'2':{start:{line:8,column:13},end:{line:8,column:38}},'3':{start:{line:30,column:11},end:{line:32,column:1}},'4':{start:{line:31,column:2},end:{line:31,column:55}},'5':{start:{line:34,column:0},end:{line:34,column:42}}},fnMap:{'0':{name:'fold',decl:{start:{line:30,column:35},end:{line:30,column:39}},loc:{start:{line:30,column:49},end:{line:32,column:1}},line:30}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0},f:{'0':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();++cov_1gx0aazog5.s[0];Object.defineProperty(exports,"__esModule",{value:true});++cov_1gx0aazog5.s[1];exports.fold=undefined;var _curry=(++cov_1gx0aazog5.s[2],require('../utils/curry'));/**
 * takes a list and an accumulator and an initial value.
 * it applies the accumulator for each value in the list
 * allong with the current value from the accumulator
 * starting with the initial value
 *
 * @example
 *   const accumulator = (acc, n) => acc + n
 *   const initialVal  = 0
 *   const aList       = list.of([1, 1, 1])
 *
 *   list.fold(aList, accumulator, initialVal) // returns 3
 *
 * @name list.fold
 * @param  {List} l to fold
 * @param  {any} f accumulator
 * @param  {any} i initial accum value
 * @return {any} the final value from the accumulator
 * @since 0.0.1
 */var fold=(++cov_1gx0aazog5.s[3],exports.fold=function fold(l,f,i){++cov_1gx0aazog5.f[0];++cov_1gx0aazog5.s[4];return Array.prototype.reduce.call(l.__data__,f,i);});++cov_1gx0aazog5.s[5];exports.default=(0,_curry.curry)(fold);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvbGQuanMiXSwibmFtZXMiOlsiZm9sZCIsImwiLCJmIiwiaSIsIkFycmF5IiwicHJvdG90eXBlIiwicmVkdWNlIiwiY2FsbCIsIl9fZGF0YV9fIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JPLElBQU1BLHNCQUNYLFNBRFdBLElBQ1gsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEVBQU9DLENBQVA7QUFBQSxTQUFhQyxNQUFNQyxTQUFOLENBQWdCQyxNQUFoQixDQUF1QkMsSUFBdkIsQ0FBNEJOLEVBQUVPLFFBQTlCLEVBQXdDTixDQUF4QyxFQUEyQ0MsQ0FBM0MsQ0FBYjtBQUFBLENBREs7O2tCQUlRLGtCQUFNSCxJQUFOLEMiLCJmaWxlIjoiZm9sZC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbGVvbi9EZXZlbG9wbWVudC9KYXZhc2NyaXB0L2ltbXV0L3NvdXJjZS9saXN0Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTGlzdCwgRnVuYyB9IGZyb20gJy4uL2NvbnN0cy90eXBlcydcbmltcG9ydCB7IGN1cnJ5IH0gICAgICAgICAgIGZyb20gJy4uL3V0aWxzL2N1cnJ5J1xuXG5cbi8qKlxuICogdGFrZXMgYSBsaXN0IGFuZCBhbiBhY2N1bXVsYXRvciBhbmQgYW4gaW5pdGlhbCB2YWx1ZS5cbiAqIGl0IGFwcGxpZXMgdGhlIGFjY3VtdWxhdG9yIGZvciBlYWNoIHZhbHVlIGluIHRoZSBsaXN0XG4gKiBhbGxvbmcgd2l0aCB0aGUgY3VycmVudCB2YWx1ZSBmcm9tIHRoZSBhY2N1bXVsYXRvclxuICogc3RhcnRpbmcgd2l0aCB0aGUgaW5pdGlhbCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAgIGNvbnN0IGFjY3VtdWxhdG9yID0gKGFjYywgbikgPT4gYWNjICsgblxuICogICBjb25zdCBpbml0aWFsVmFsICA9IDBcbiAqICAgY29uc3QgYUxpc3QgICAgICAgPSBsaXN0Lm9mKFsxLCAxLCAxXSlcbiAqXG4gKiAgIGxpc3QuZm9sZChhTGlzdCwgYWNjdW11bGF0b3IsIGluaXRpYWxWYWwpIC8vIHJldHVybnMgM1xuICpcbiAqIEBuYW1lIGxpc3QuZm9sZFxuICogQHBhcmFtICB7TGlzdH0gbCB0byBmb2xkXG4gKiBAcGFyYW0gIHthbnl9IGYgYWNjdW11bGF0b3JcbiAqIEBwYXJhbSAge2FueX0gaSBpbml0aWFsIGFjY3VtIHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9IHRoZSBmaW5hbCB2YWx1ZSBmcm9tIHRoZSBhY2N1bXVsYXRvclxuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBjb25zdCBmb2xkOiAobDogTGlzdCwgZjogRnVuYywgaTogYW55KSA9PiBhbnkgPVxuICAobCwgZiwgaSkgPT4gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKGwuX19kYXRhX18sIGYsIGkpXG5cblxuZXhwb3J0IGRlZmF1bHQgY3VycnkoZm9sZClcbiJdfQ==