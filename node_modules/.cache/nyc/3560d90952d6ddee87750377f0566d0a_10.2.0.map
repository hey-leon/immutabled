{"version":3,"sources":["is.js"],"names":["isImmut","u","Object","values","includes","__type__","isList","list","isMap","map","isArray","Array","isObject","isPrimitive","undefined","Number","isNaN"],"mappings":";;;;;;;AACA;;;;;;AAMA;;;;;;;;AAQO,IAAMA,4BAAkB,SAAlBA,OAAkB;AAAA,SAAK,CAAC,CAACC,CAAF,IAAOC,OAAOC,MAAP,oBAAuBC,QAAvB,CAAgCH,EAAEI,QAAlC,CAAZ;AAAA,CAAxB;;AAGP;;;;;;;;;AAQO,IAAMC,0BAAiB,SAAjBA,MAAiB;AAAA,SAAK,CAAC,CAACL,CAAF,IAAOA,EAAEI,QAAF,KAAe,kBAAQE,IAAnC;AAAA,CAAvB;;AAGP;;;;;;;;AAQO,IAAMC,wBAAgB,SAAhBA,KAAgB;AAAA,SAAK,CAAC,CAACP,CAAF,IAAOA,EAAEI,QAAF,KAAe,kBAAQI,GAAnC;AAAA,CAAtB;;AAGP;;;;;;;;AAQO,IAAMC,4BAAkB,SAAlBA,OAAkB;AAAA,SAAK,CAAC,CAACT,CAAF,IAAOU,MAAMD,OAAN,CAAcT,CAAd,CAAZ;AAAA,CAAxB;;AAGP;;;;;;;;AAQO,IAAMW,8BACX,SADWA,QACX;AAAA,SAAK,CAAC,CAACX,CAAF,IACAA,MAAMC,OAAOD,CAAP,CADN,IAEA,CAACU,MAAMD,OAAN,CAAcT,CAAd,CAFD,IAGA,CAACC,OAAOC,MAAP,oBAAuBC,QAAvB,CAAgCH,EAAEI,QAAlC,CAHN;AAAA,CADK;;AAOP;;;;;;;;AAQO,IAAMQ,oCACX,SADWA,WACX;AAAA,SAAKZ,MAAMa,SAAN,IACAb,MAAM,IADN,KAEGA,MAAM,EAAN,IACAA,MAAM,CADN,IAEAA,MAAMC,OAAOD,CAAP,CAFN,IAGAc,OAAOC,KAAP,CAAaf,CAAb,CALH,CAAL;AAAA,CADK","file":"is.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/utils","sourcesContent":["// @flow\nimport symbols from '../consts/symbols'\n\n\ntype isType = (u: any) => boolean\n\n\n/**\n * identifies if u is an immutabled type\n *\n * @name isImmut\n * @param  {any} u entity to identify if is an immutabled type\n * @return {bool} whether the entity is an immutabled type\n * @since 0.0.1\n */\nexport const isImmut: isType = u => !!u && Object.values(symbols).includes(u.__type__)\n\n\n/**\n * identifies if u is a list type\n *\n * @name isList\n * @param  {any} u entity to identify if is a list type\n * @return {bool} whether the entity is a list type\n * @since 0.0.1\n */\nexport const isList: isType = u => !!u && u.__type__ === symbols.list\n\n\n/**\n * identifies if u is a map type\n *\n * @name isMap\n * @param  {any} u entity to identify if is a map type\n * @return {bool} whether the entity is a map type\n * @since 0.0.1\n */\nexport const isMap: isType = u => !!u && u.__type__ === symbols.map\n\n\n/**\n * identifies if u is an array type\n *\n * @name isArray\n * @param  {any} u entity to identify if is an array type\n * @return {bool} whether the entity is an array type\n * @since 0.0.1\n */\nexport const isArray: isType = u => !!u && Array.isArray(u)\n\n\n/**\n * identifies if u is an object type\n *\n * @name isObject\n * @param  {any} u entity to identify if is an object type\n * @return {bool} whether the entity is an object type\n * @since 0.0.1\n */\nexport const isObject: isType =\n  u => !!u\n    && u === Object(u)\n    && !Array.isArray(u)\n    && !Object.values(symbols).includes(u.__type__)\n\n\n/**\n * identifies if u is a primitive type\n *\n * @name isPrimitive\n * @param  {any} u entity to identify if is a primitive type\n * @return {bool} whether the entity is a primitive type\n * @since 0.0.1\n */\nexport const isPrimitive: isType =\n  u => u !== undefined\n    && u !== null\n    && (  u === ''\n       || u === 0\n       || u !== Object(u)\n       || Number.isNaN(u) )\n"]}