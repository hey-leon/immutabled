'use strict';var cov_1y6li4dr0c=function(){var path='/Users/leon/Development/Javascript/immut/source/list/find.js',hash='8e22cc21d629f9044ce15e70f6fd9de50204e59f',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/leon/Development/Javascript/immut/source/list/find.js',statementMap:{'0':{start:{line:3,column:0},end:{line:5,column:3}},'1':{start:{line:6,column:0},end:{line:6,column:25}},'2':{start:{line:8,column:13},end:{line:8,column:38}},'3':{start:{line:21,column:11},end:{line:23,column:1}},'4':{start:{line:22,column:2},end:{line:22,column:50}},'5':{start:{line:25,column:0},end:{line:25,column:42}}},fnMap:{'0':{name:'find',decl:{start:{line:21,column:35},end:{line:21,column:39}},loc:{start:{line:21,column:46},end:{line:23,column:1}},line:21}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0},f:{'0':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();++cov_1y6li4dr0c.s[0];Object.defineProperty(exports,"__esModule",{value:true});++cov_1y6li4dr0c.s[1];exports.find=undefined;var _curry=(++cov_1y6li4dr0c.s[2],require('../utils/curry'));/**
 * takes a list and a predicate and returns the first item
 * in the list to pass the predicate. if no item passes
 * the predicate the return is null.
 *
 * @name list.find
 * @param  {List} l to find item in
 * @param  {any}  f to be predicate
 * @return {any|null} the first item to pass the predicate or null
 * @since 0.0.1
 */var find=(++cov_1y6li4dr0c.s[3],exports.find=function find(l,f){++cov_1y6li4dr0c.f[0];++cov_1y6li4dr0c.s[4];return Array.prototype.find.call(l.__data__,f);});++cov_1y6li4dr0c.s[5];exports.default=(0,_curry.curry)(find);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbmQuanMiXSwibmFtZXMiOlsiZmluZCIsImwiLCJmIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwiX19kYXRhX18iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFHQTs7Ozs7Ozs7Ozs7QUFXTyxJQUFNQSxzQkFDWCxTQURXQSxJQUNYLENBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFNBQVVDLE1BQU1DLFNBQU4sQ0FBZ0JKLElBQWhCLENBQXFCSyxJQUFyQixDQUEwQkosRUFBRUssUUFBNUIsRUFBc0NKLENBQXRDLENBQVY7QUFBQSxDQURLOztrQkFJUSxrQkFBTUYsSUFBTixDIiwiZmlsZSI6ImZpbmQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2xlb24vRGV2ZWxvcG1lbnQvSmF2YXNjcmlwdC9pbW11dC9zb3VyY2UvbGlzdCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IExpc3QsIEZ1bmMgfSBmcm9tICcuLi9jb25zdHMvdHlwZXMnXG5pbXBvcnQgeyBjdXJyeSB9ICAgICAgICAgICBmcm9tICcuLi91dGlscy9jdXJyeSdcblxuXG4vKipcbiAqIHRha2VzIGEgbGlzdCBhbmQgYSBwcmVkaWNhdGUgYW5kIHJldHVybnMgdGhlIGZpcnN0IGl0ZW1cbiAqIGluIHRoZSBsaXN0IHRvIHBhc3MgdGhlIHByZWRpY2F0ZS4gaWYgbm8gaXRlbSBwYXNzZXNcbiAqIHRoZSBwcmVkaWNhdGUgdGhlIHJldHVybiBpcyBudWxsLlxuICpcbiAqIEBuYW1lIGxpc3QuZmluZFxuICogQHBhcmFtICB7TGlzdH0gbCB0byBmaW5kIGl0ZW0gaW5cbiAqIEBwYXJhbSAge2FueX0gIGYgdG8gYmUgcHJlZGljYXRlXG4gKiBAcmV0dXJuIHthbnl8bnVsbH0gdGhlIGZpcnN0IGl0ZW0gdG8gcGFzcyB0aGUgcHJlZGljYXRlIG9yIG51bGxcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5leHBvcnQgY29uc3QgZmluZDogKGw6IExpc3QsIGY6IEZ1bmMpID0+IGFueSB8IG51bGwgPVxuICAobCwgZikgPT4gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChsLl9fZGF0YV9fLCBmKVxuXG5cbmV4cG9ydCBkZWZhdWx0IGN1cnJ5KGZpbmQpXG4iXX0=