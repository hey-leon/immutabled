{"version":3,"sources":["findIndex.js"],"names":["findIndex","l","f","Array","prototype","call","__data__"],"mappings":";;;;;;;AAEA;;AAGA;;;;;;;;;;;AAWO,IAAMA,gCACX,SADWA,SACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,MAAMC,SAAN,CAAgBJ,SAAhB,CAA0BK,IAA1B,CAA+BJ,EAAEK,QAAjC,EAA2CJ,CAA3C,CAAV;AAAA,CADK;;kBAIQ,kBAAMF,SAAN,C","file":"findIndex.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\n\n\n/**\n * takes a list and a predicate and returns the index of\n * first item in the list to pass the predicate.\n * if no item passes the predicate the return is -1.\n *\n * @name list.findIndex\n * @param  {List} l to find index in\n * @param  {any}  f to be predicate\n * @return {number} the first item to pass the predicate or -1\n * @since 0.0.1\n */\nexport const findIndex: (l: List, f: Func) => number =\n  (l, f) => Array.prototype.findIndex.call(l.__data__, f)\n\n\nexport default curry(findIndex)\n"]}