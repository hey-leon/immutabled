{"version":3,"sources":["partition.js"],"names":["partition","m","f","Object","entries","__data__","reduce","i","a","l","r","k","e","p","length","__size__","keys"],"mappings":";;;;;;;;;;;AAEA;;AACA;;;;;;;;AAGA;;;;;;;;;;;AAWO,IAAMA,gCACX,SADWA,SACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,OAAOC,OAAP,CAAeH,EAAEI,QAAjB,EAA2BC,MAA3B,CACR,uBAAqBC,CAArB,EAAwBC,CAAxB,EAA8B;AAAA;AAAA,QAA3BC,CAA2B;AAAA,QAAxBC,CAAwB;;AAAA;AAAA,QAAjBC,CAAiB;AAAA,QAAdC,CAAc;;AAC5B,QAAMC,IAAIX,EAAEU,CAAF,CAAV;;AAEAH,MAAEJ,QAAF,GAAaQ,iBAASJ,EAAEJ,QAAX,sBAAsBM,CAAtB,EAA0BC,CAA1B,KAAgCH,EAAEJ,QAA/C;AACAK,MAAEL,QAAF,GAAaQ,IAAIH,EAAEL,QAAN,gBAAsBK,EAAEL,QAAxB,sBAAmCM,CAAnC,EAAuCC,CAAvC,EAAb;;AAEA,QAAIL,MAAMC,EAAEM,MAAF,GAAW,CAArB,EAAwB;AACtBL,QAAEM,QAAF,GAAaZ,OAAOa,IAAP,CAAYP,EAAEJ,QAAd,EAAwBS,MAArC;AACAJ,QAAEK,QAAF,GAAaZ,OAAOa,IAAP,CAAYN,EAAEL,QAAd,EAAwBS,MAArC;AACD;;AAED,WAAO,CAAEL,CAAF,EAAKC,CAAL,CAAP;AACD,GAbO,EAcR,CAAE,mBAAF,EAAQ,mBAAR,CAdQ,CAAV;AAAA,CADK;;kBAmBQ,kBAAMV,SAAN,C","file":"partition.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/map","sourcesContent":["// @flow\nimport type { Map, Func } from '../consts/types'\nimport { curry }          from '../utils/curry'\nimport of                 from './of'\n\n\n/**\n * takes a predicate and uses it to partition the map into a\n * map pair. for each entity if the predicate returns true\n * the entity will be in the first map, else the second.\n *\n * @name map.partition\n * @param  {Map}  m map to partition\n * @param  {Func} f predicate\n * @return {[Map, Map]} pair of maps, left true, right false\n * @since 0.0.1\n */\nexport const partition: (m: Map, f: Func) => [ Map, Map ] =\n  (m, f) => Object.entries(m.__data__).reduce(\n    ([ l, r ], [ k, e ], i, a) => {\n      const p = f(e)\n\n      l.__data__ = p ? { ...l.__data__, [k]: e } : l.__data__\n      r.__data__ = p ? r.__data__ : { ...r.__data__, [k]: e }\n\n      if (i === a.length - 1) {\n        l.__size__ = Object.keys(l.__data__).length\n        r.__size__ = Object.keys(r.__data__).length\n      }\n\n      return [ l, r ]\n    },\n    [ of(), of() ]\n  )\n\n\nexport default curry(partition)\n"]}