{"version":3,"sources":["sort.js"],"names":["sort","l","f","Array","prototype","call","__data__"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;;;;;AAUO,IAAMA,sBACX,SADWA,IACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAU,YAAIC,MAAMC,SAAN,CAAgBJ,IAAhB,CAAqBK,IAArB,CAA0BJ,EAAEK,QAA5B,EAAsCJ,CAAtC,CAAJ,CAAV;AAAA,CADK;kBAIQ,kBAAMF,IAAN,C","file":"sort.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\nimport { of }              from './of'\n\n\n/**\n * takes a list and a comparator and returns\n * a new list sorted by the comparator.\n *\n * @name list.sort\n * @param  {List} l to sort\n * @param  {any}  f comparator\n * @return {List} sorted by the comparator\n * @since 0.0.1\n */\nexport const sort: (l: List, f: Func) => List =\n  (l, f) => of( Array.prototype.sort.call(l.__data__, f) )\n\n\nexport default curry(sort)\n"]}