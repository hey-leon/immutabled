'use strict';var cov_2itck5602t=function(){var path='/Users/leon/Development/Javascript/immut/source/list/concat.js',hash='696d4a878e66674af81ccc6670a166d8a3fd1262',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/leon/Development/Javascript/immut/source/list/concat.js',statementMap:{'0':{start:{line:3,column:0},end:{line:5,column:3}},'1':{start:{line:6,column:0},end:{line:6,column:27}},'2':{start:{line:8,column:13},end:{line:8,column:38}},'3':{start:{line:10,column:10},end:{line:10,column:25}},'4':{start:{line:22,column:13},end:{line:24,column:1}},'5':{start:{line:23,column:2},end:{line:23,column:76}},'6':{start:{line:25,column:0},end:{line:25,column:44}}},fnMap:{'0':{name:'concat',decl:{start:{line:22,column:39},end:{line:22,column:45}},loc:{start:{line:22,column:54},end:{line:24,column:1}},line:22}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},f:{'0':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();++cov_2itck5602t.s[0];Object.defineProperty(exports,"__esModule",{value:true});++cov_2itck5602t.s[1];exports.concat=undefined;var _curry=(++cov_2itck5602t.s[2],require('../utils/curry'));var _of=(++cov_2itck5602t.s[3],require('./of'));/**
 * takes two immutable lists and returns a new combined
 * list. list two is concatenated to the end of list one.
 *
 * @name list.concat
 * @param  {List} l1 to concat
 * @param  {any}  l2 to be predicate
 * @return {List} a new list of combined l1 && l2.
 * @since 0.0.1
 */var concat=(++cov_2itck5602t.s[4],exports.concat=function concat(l1,l2){++cov_2itck5602t.f[0];++cov_2itck5602t.s[5];return(0,_of.of)(Array.prototype.concat.call(l1.__data__,l2.__data__));});++cov_2itck5602t.s[6];exports.default=(0,_curry.curry)(concat);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmNhdC5qcyJdLCJuYW1lcyI6WyJjb25jYXQiLCJsMSIsImwyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwiX19kYXRhX18iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFHQTs7Ozs7Ozs7OztBQVVPLElBQU1BLDBCQUNYLFNBRFdBLE1BQ1gsQ0FBQ0MsRUFBRCxFQUFLQyxFQUFMO0FBQUEsU0FBWSxZQUFJQyxNQUFNQyxTQUFOLENBQWdCSixNQUFoQixDQUF1QkssSUFBdkIsQ0FBNEJKLEdBQUdLLFFBQS9CLEVBQXlDSixHQUFHSSxRQUE1QyxDQUFKLENBQVo7QUFBQSxDQURLO2tCQUlRLGtCQUFNTixNQUFOLEMiLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9sZW9uL0RldmVsb3BtZW50L0phdmFzY3JpcHQvaW1tdXQvc291cmNlL2xpc3QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBMaXN0IH0gZnJvbSAnLi4vY29uc3RzL3R5cGVzJ1xuaW1wb3J0IHsgY3VycnkgfSAgICAgZnJvbSAnLi4vdXRpbHMvY3VycnknXG5pbXBvcnQgeyBvZiB9ICAgICAgICBmcm9tICcuL29mJ1xuXG5cbi8qKlxuICogdGFrZXMgdHdvIGltbXV0YWJsZSBsaXN0cyBhbmQgcmV0dXJucyBhIG5ldyBjb21iaW5lZFxuICogbGlzdC4gbGlzdCB0d28gaXMgY29uY2F0ZW5hdGVkIHRvIHRoZSBlbmQgb2YgbGlzdCBvbmUuXG4gKlxuICogQG5hbWUgbGlzdC5jb25jYXRcbiAqIEBwYXJhbSAge0xpc3R9IGwxIHRvIGNvbmNhdFxuICogQHBhcmFtICB7YW55fSAgbDIgdG8gYmUgcHJlZGljYXRlXG4gKiBAcmV0dXJuIHtMaXN0fSBhIG5ldyBsaXN0IG9mIGNvbWJpbmVkIGwxICYmIGwyLlxuICogQHNpbmNlIDAuMC4xXG4gKi9cbmV4cG9ydCBjb25zdCBjb25jYXQ6IChsMTogTGlzdCwgbDI6IExpc3QpID0+IExpc3QgPVxuICAobDEsIGwyKSA9PiBvZiggQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKGwxLl9fZGF0YV9fLCBsMi5fX2RhdGFfXykgKVxuXG5cbmV4cG9ydCBkZWZhdWx0IGN1cnJ5KGNvbmNhdClcbiJdfQ==