{"version":3,"sources":["concat.js"],"names":["concat","l1","l2","Array","prototype","call","__data__"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;;;;;AAUO,IAAMA,0BACX,SADWA,MACX,CAACC,EAAD,EAAKC,EAAL;AAAA,SAAY,YAAIC,MAAMC,SAAN,CAAgBJ,MAAhB,CAAuBK,IAAvB,CAA4BJ,GAAGK,QAA/B,EAAyCJ,GAAGI,QAA5C,CAAJ,CAAZ;AAAA,CADK;kBAIQ,kBAAMN,MAAN,C","file":"concat.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List } from '../consts/types'\nimport { curry }     from '../utils/curry'\nimport { of }        from './of'\n\n\n/**\n * takes two immutable lists and returns a new combined\n * list. list two is concatenated to the end of list one.\n *\n * @name list.concat\n * @param  {List} l1 to concat\n * @param  {any}  l2 to be predicate\n * @return {List} a new list of combined l1 && l2.\n * @since 0.0.1\n */\nexport const concat: (l1: List, l2: List) => List =\n  (l1, l2) => of( Array.prototype.concat.call(l1.__data__, l2.__data__) )\n\n\nexport default curry(concat)\n"]}