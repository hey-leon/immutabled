{"version":3,"sources":["partition.js"],"names":["partition","l","f","__data__","reduce","v","i","a","r","p","length","__size__"],"mappings":";;;;;;;;;AAEA;;AACA;;;;AAGA;;;;;;;;;;;AAWO,IAAMA,gCACX,SADWA,SACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,EAAEE,QAAF,CAAWC,MAAX,CACR,gBAAWC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAuB;AAAA;AAAA,QAApBN,CAAoB;AAAA,QAAjBO,CAAiB;;AACrB,QAAMC,IAAIP,EAAEG,CAAF,CAAV;;AAEAJ,MAAEE,QAAF,GAAaM,iCAASR,EAAEE,QAAX,IAAqBE,CAArB,KAA2BJ,EAAEE,QAA1C;AACAK,MAAEL,QAAF,GAAaM,IAAID,EAAEL,QAAN,gCAAsBK,EAAEL,QAAxB,IAAkCE,CAAlC,EAAb;;AAEA,QAAIC,MAAMC,EAAEG,MAAF,GAAW,CAArB,EAAwB;AACtBT,QAAEU,QAAF,GAAaV,EAAEE,QAAF,CAAWO,MAAxB;AACAF,QAAEG,QAAF,GAAaH,EAAEL,QAAF,CAAWO,MAAxB;AACD;;AAED,WAAO,CAAET,CAAF,EAAKO,CAAL,CAAP;AACD,GAbO,EAcR,CAAE,aAAF,EAAQ,aAAR,CAdQ,CAAV;AAAA,CADK;;kBAmBQ,kBAAMR,SAAN,C","file":"partition.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\nimport { of }              from './of'\n\n\n/**\n * takes a predicate and uses it to partition the list into a\n * list pair. for each entity if the predicate returns true\n * the entity will be in the first list, else the second.\n *\n * @name list.partition\n * @param  {List} l to partition\n * @param  {Func} f predicate\n * @return {[List, List]} pair of lists, left true, right false.\n * @since 0.0.1\n */\nexport const partition: (l: List, f: Func) => [ List, List ] =\n  (l, f) => l.__data__.reduce(\n    ([ l, r ], v, i, a) => {\n      const p = f(v)\n\n      l.__data__ = p ? [ ...l.__data__, v ] : l.__data__\n      r.__data__ = p ? r.__data__ : [ ...r.__data__, v ]\n\n      if (i === a.length - 1) {\n        l.__size__ = l.__data__.length\n        r.__size__ = r.__data__.length\n      }\n\n      return [ l, r ]\n    },\n    [ of(), of() ]\n  )\n\n\nexport default curry(partition)\n"]}