{"version":3,"sources":["apply.js"],"names":["apply","i","f","k","ks","length","set","__data__","update","TypeError"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;AAIA;;;;;;;;;;;;AAYO,IAAMA,wBACX,SADWA,KACX,CAACC,CAAD,QAAkBC,CAAlB;AAAA;AAAA,MAAMC,CAAN;AAAA,MAAYC,EAAZ;;AAAA,SACE,gBAAOH,CAAP,IACIG,GAAGC,MAAH,GAAY,CAAZ,GACE,eAAKC,GAAL,CAASL,CAAT,EAAYE,CAAZ,EAAeH,MAAMC,EAAEM,QAAF,CAAWJ,CAAX,CAAN,EAAqBC,EAArB,EAAyBF,CAAzB,CAAf,CADF,GAEE,eAAKM,MAAL,CAAYP,CAAZ,EAAeE,CAAf,EAAkBD,CAAlB,CAHN,GAIA,eAAMD,CAAN,IACIG,GAAGC,MAAH,GAAY,CAAZ,GACE,cAAIC,GAAJ,CAAQL,CAAR,EAAWE,CAAX,EAAcH,MAAMC,EAAEM,QAAF,CAAWJ,CAAX,CAAN,EAAqBC,EAArB,EAAyBF,CAAzB,CAAd,CADF,GAEE,cAAIM,MAAJ,CAAWP,CAAX,EAAcE,CAAd,EAAiBD,CAAjB,CAHN,GAIA,2BAAaO,SAAb,EAAwB,2BAAxB,CATF;AAAA,CADK;;kBAeQ,kBAAMT,KAAN,C","file":"apply.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/immut","sourcesContent":["// @flow\nimport type { Immut, Func } from '../consts/types'\nimport { runtimeError }     from '../utils/helpers'\nimport { isList, isMap }    from '../utils/is'\nimport { curry }            from '../utils/curry'\nimport list                 from '../list'\nimport map                  from '../map'\n\n\n\n/**\n * takes an immutable, a key array, and an updater, and\n * applies the updater function to the entity at the\n * key path.\n *\n * @name immut.apply\n * @param  {Immut} i to apply f to\n * @param  {any[]} ks of the path to apply to\n * @param  {Func}  f to apply\n * @return {Immut} the copy of the immutable with the updated value\n * @since 0.0.1\n */\nexport const apply: (i: Immut, ks: any[], f: Func) => Immut | void =\n  (i, [ k, ...ks ], f) =>\n    isList(i)\n      ? ks.length > 0\n        ? list.set(i, k, apply(i.__data__[k], ks, f))\n        : list.update(i, k, f)\n  : isMap(i)\n      ? ks.length > 0\n        ? map.set(i, k, apply(i.__data__[k], ks, f))\n        : map.update(i, k, f)\n  : runtimeError(TypeError, 'Path does not match shape')\n\n\n\n\nexport default curry(apply)\n"]}