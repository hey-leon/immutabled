{"version":3,"sources":["update.js"],"names":["update","m","k","f","__type__","map","__size__","__data__"],"mappings":";;;;;;;;;AAEA;;AACA;;;;;;;;AAGA;;;;;;;;;;;;;AAaO,IAAMA,0BACX,SADWA,MACX,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP;AAAA,SAAc;AACZC,cAAU,kBAAQC,GADN;AAEZC,cAAUL,EAAEM,QAAF,CAAWL,CAAX,IAAgBD,EAAEK,QAAlB,GAA6BL,EAAEK,QAAF,GAAa,CAFxC;AAGZC,2BACKN,EAAEM,QADP,sBACkBL,CADlB,EACsBC,EAAEF,EAAEM,QAAF,CAAWL,CAAX,CAAF,CADtB;AAHY,GAAd;AAAA,CADK;;kBAUQ,kBAAMF,MAAN,C","file":"update.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/map","sourcesContent":["// @flow\nimport type { Map, Func } from '../consts/types'\nimport { curry }          from '../utils/curry'\nimport symbols            from '../consts/symbols'\n\n\n/**\n * takes a key and an updater fn. if the key exists on the map\n * the current value the updater fn is called with the value,\n * else with no params. whatever the updater returns is\n * set as the new value on the map for the key.\n *\n * @name map.update\n * @param  {Map}  m to set value on\n * @param  {any}  k is the key of the value to get\n * @param  {Func} f to update value on map\n * @return {Map}  an updated copy\n * @since 0.0.1\n */\nexport const update: (m: Map, k: any, f: Func) => Map =\n  (m, k, f) => ({\n    __type__: symbols.map,\n    __size__: m.__data__[k] ? m.__size__ : m.__size__ + 1,\n    __data__: {\n      ...m.__data__, [k]: f(m.__data__[k]),\n    },\n  })\n\n\nexport default curry(update)\n"]}