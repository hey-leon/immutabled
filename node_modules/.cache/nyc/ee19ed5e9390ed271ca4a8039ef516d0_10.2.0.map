{"version":3,"sources":["of.js"],"names":["of","s","Array","isArray","build","length","__data__","__size__","data","size","__type__","list"],"mappings":";;;;;;;AAEA;;;;;;;;AAGA;;;;;;;;;AASO,IAAMA,kBACX,SADWA,EACX;AAAA,MAACC,CAAD,uEAAG,EAAH;AAAA,SAAUC,MAAMC,OAAN,CAAcF,CAAd,IACAG,mCAAWH,CAAX,IAAgBA,EAAEI,MAAlB,CADA,GAEAD,mCAAWH,EAAEK,QAAb,IAAyBL,EAAEM,QAA3B,CAFV;AAAA,CADK;;AAMA,IAAMH,wBACX,SADWA,KACX,CAACI,IAAD,EAAOC,IAAP;AAAA,SAAiB;AACfC,cAAU,kBAAQC,IADH;AAEfL,cAAUE,IAFK;AAGfD,cAAUE;AAHK,GAAjB;AAAA,CADK;;kBAQQT,E","file":"of.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List } from '../consts/types'\nimport symbols       from '../consts/symbols'\n\n\n/**\n * takes a list like type and constructs a new\n * list.\n *\n * @name list.of\n * @param  {any[]|List} s of data to build list from\n * @return {List}\n * @since 0.0.1\n */\nexport const of: (s?: List | any[]) => List =\n  (s=[]) => Array.isArray(s)\n          ? build([ ...s ], s.length)\n          : build([ ...s.__data__ ], s.__size__)\n\n\nexport const build: (data: any[], size: number) => any =\n  (data, size) => ({\n    __type__: symbols.list,\n    __data__: data,\n    __size__: size,\n  })\n\n\nexport default of\n"]}