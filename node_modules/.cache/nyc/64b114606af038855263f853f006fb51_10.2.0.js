'use strict';var cov_as5l6n1xp=function(){var path='/Users/leon/Development/Javascript/immut/source/list/findIndex.js',hash='874afe29ad2ad789885a27a4771bc8789f402ada',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/leon/Development/Javascript/immut/source/list/findIndex.js',statementMap:{'0':{start:{line:3,column:0},end:{line:5,column:3}},'1':{start:{line:6,column:0},end:{line:6,column:30}},'2':{start:{line:8,column:13},end:{line:8,column:38}},'3':{start:{line:21,column:16},end:{line:23,column:1}},'4':{start:{line:22,column:2},end:{line:22,column:55}},'5':{start:{line:25,column:0},end:{line:25,column:47}}},fnMap:{'0':{name:'findIndex',decl:{start:{line:21,column:45},end:{line:21,column:54}},loc:{start:{line:21,column:61},end:{line:23,column:1}},line:21}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0},f:{'0':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();++cov_as5l6n1xp.s[0];Object.defineProperty(exports,"__esModule",{value:true});++cov_as5l6n1xp.s[1];exports.findIndex=undefined;var _curry=(++cov_as5l6n1xp.s[2],require('../utils/curry'));/**
 * takes a list and a predicate and returns the index of
 * first item in the list to pass the predicate.
 * if no item passes the predicate the return is -1.
 *
 * @name list.findIndex
 * @param  {List} l to find index in
 * @param  {any}  f to be predicate
 * @return {number} the first item to pass the predicate or -1
 * @since 0.0.1
 */var findIndex=(++cov_as5l6n1xp.s[3],exports.findIndex=function findIndex(l,f){++cov_as5l6n1xp.f[0];++cov_as5l6n1xp.s[4];return Array.prototype.findIndex.call(l.__data__,f);});++cov_as5l6n1xp.s[5];exports.default=(0,_curry.curry)(findIndex);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbmRJbmRleC5qcyJdLCJuYW1lcyI6WyJmaW5kSW5kZXgiLCJsIiwiZiIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsIl9fZGF0YV9fIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBR0E7Ozs7Ozs7Ozs7O0FBV08sSUFBTUEsZ0NBQ1gsU0FEV0EsU0FDWCxDQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxTQUFVQyxNQUFNQyxTQUFOLENBQWdCSixTQUFoQixDQUEwQkssSUFBMUIsQ0FBK0JKLEVBQUVLLFFBQWpDLEVBQTJDSixDQUEzQyxDQUFWO0FBQUEsQ0FESzs7a0JBSVEsa0JBQU1GLFNBQU4sQyIsImZpbGUiOiJmaW5kSW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2xlb24vRGV2ZWxvcG1lbnQvSmF2YXNjcmlwdC9pbW11dC9zb3VyY2UvbGlzdCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IExpc3QsIEZ1bmMgfSBmcm9tICcuLi9jb25zdHMvdHlwZXMnXG5pbXBvcnQgeyBjdXJyeSB9ICAgICAgICAgICBmcm9tICcuLi91dGlscy9jdXJyeSdcblxuXG4vKipcbiAqIHRha2VzIGEgbGlzdCBhbmQgYSBwcmVkaWNhdGUgYW5kIHJldHVybnMgdGhlIGluZGV4IG9mXG4gKiBmaXJzdCBpdGVtIGluIHRoZSBsaXN0IHRvIHBhc3MgdGhlIHByZWRpY2F0ZS5cbiAqIGlmIG5vIGl0ZW0gcGFzc2VzIHRoZSBwcmVkaWNhdGUgdGhlIHJldHVybiBpcyAtMS5cbiAqXG4gKiBAbmFtZSBsaXN0LmZpbmRJbmRleFxuICogQHBhcmFtICB7TGlzdH0gbCB0byBmaW5kIGluZGV4IGluXG4gKiBAcGFyYW0gIHthbnl9ICBmIHRvIGJlIHByZWRpY2F0ZVxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgZmlyc3QgaXRlbSB0byBwYXNzIHRoZSBwcmVkaWNhdGUgb3IgLTFcbiAqIEBzaW5jZSAwLjAuMVxuICovXG5leHBvcnQgY29uc3QgZmluZEluZGV4OiAobDogTGlzdCwgZjogRnVuYykgPT4gbnVtYmVyID1cbiAgKGwsIGYpID0+IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXguY2FsbChsLl9fZGF0YV9fLCBmKVxuXG5cbmV4cG9ydCBkZWZhdWx0IGN1cnJ5KGZpbmRJbmRleClcbiJdfQ==