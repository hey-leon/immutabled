{"version":3,"sources":["filter.js"],"names":["filter","l","f","Array","prototype","call","__data__"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;;;;;AAUO,IAAMA,0BACX,SADWA,MACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAU,YAAIC,MAAMC,SAAN,CAAgBJ,MAAhB,CAAuBK,IAAvB,CAA4BJ,EAAEK,QAA9B,EAAwCJ,CAAxC,CAAJ,CAAV;AAAA,CADK;kBAIQ,kBAAMF,MAAN,C","file":"filter.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\nimport { of }              from './of'\n\n\n/**\n * takes a list and a predicate and returns a new list consisting\n * of the elements which pass the predicate.\n *\n * @name list.filter\n * @param  {List} l to filter\n * @param  {any} f to be predicate\n * @return {List} of elements that pass the predicate\n * @since 0.0.1\n */\nexport const filter: (l: List, f: Func) => List =\n  (l, f) => of( Array.prototype.filter.call(l.__data__, f) )\n\n\nexport default curry(filter)\n"]}