{"version":3,"sources":["some.js"],"names":["some","l","f","Array","prototype","call","__data__"],"mappings":";;;;;;;AAEA;;AAGA;;;;;;;;;;;AAWO,IAAMA,sBACX,SADWA,IACX,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,MAAMC,SAAN,CAAgBJ,IAAhB,CAAqBK,IAArB,CAA0BJ,EAAEK,QAA5B,EAAsCJ,CAAtC,CAAV;AAAA,CADK;;kBAIQ,kBAAMF,IAAN,C","file":"some.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\n\n\n/**\n * tests all entities against the predicate until\n * one returns true. if one returns true list.some\n * returns true else returns false.\n *\n * @name list.some\n * @param  {List} l to check if some\n * @param  {any}  f to be predicate\n * @return {bool} where the predicate passes\n * @since 0.0.1\n */\nexport const some: (l: List, f: Func) => boolean =\n  (l, f) => Array.prototype.some.call(l.__data__, f)\n\n\nexport default curry(some)\n\n"]}