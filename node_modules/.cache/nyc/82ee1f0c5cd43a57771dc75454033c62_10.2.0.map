{"version":3,"sources":["pluck.js"],"names":["pluck","m","ks","reduce","acc","k"],"mappings":";;;;;;;;;AAEA;;AACA;;;;AAGA;;;;;;;;;;AAUO,IAAMA,wBACX,SADWA,KACX,CAACC,CAAD,EAAIC,EAAJ;AAAA,SAAWA,GAAGC,MAAH,CAAU,UAACC,GAAD,EAAMC,CAAN;AAAA,wBAAkBD,GAAlB,sBAAwBC,CAAxB,EAA4B,cAAIJ,CAAJ,EAAOI,CAAP,CAA5B;AAAA,GAAV,EAAoD,EAApD,CAAX;AAAA,CADK;;kBAIQ,kBAAML,KAAN,C","file":"pluck.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/map","sourcesContent":["// @flow\nimport type { Map } from '../consts/types'\nimport { curry }    from '../utils/curry'\nimport { get }      from '../immut/get'\n\n\n/**\n * takes an array of keys and returns an object with the members\n * corresponding to the keys.\n *\n * @name map.pluck\n * @param  {Map}    m to pluck values of\n * @param  {Array}  ks to get values of\n * @return {Object} containing ks with value of map\n * @since 0.0.1\n */\nexport const pluck: (m: Map, ks: any[]) => Object =\n  (m, ks) => ks.reduce((acc, k) => ({ ...acc, [k]: get(m, k) }), {})\n\n\nexport default curry(pluck)\n"]}