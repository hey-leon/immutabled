{"version":3,"sources":["fold.js"],"names":["fold","l","f","i","Array","prototype","reduce","call","__data__"],"mappings":";;;;;;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBO,IAAMA,sBACX,SADWA,IACX,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP;AAAA,SAAaC,MAAMC,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4BN,EAAEO,QAA9B,EAAwCN,CAAxC,EAA2CC,CAA3C,CAAb;AAAA,CADK;;kBAIQ,kBAAMH,IAAN,C","file":"fold.js","sourceRoot":"/Users/leon/Development/Javascript/immut/source/list","sourcesContent":["// @flow\nimport type { List, Func } from '../consts/types'\nimport { curry }           from '../utils/curry'\n\n\n/**\n * takes a list and an accumulator and an initial value.\n * it applies the accumulator for each value in the list\n * allong with the current value from the accumulator\n * starting with the initial value\n *\n * @example\n *   const accumulator = (acc, n) => acc + n\n *   const initialVal  = 0\n *   const aList       = list.of([1, 1, 1])\n *\n *   list.fold(aList, accumulator, initialVal) // returns 3\n *\n * @name list.fold\n * @param  {List} l to fold\n * @param  {any} f accumulator\n * @param  {any} i initial accum value\n * @return {any} the final value from the accumulator\n * @since 0.0.1\n */\nexport const fold: (l: List, f: Func, i: any) => any =\n  (l, f, i) => Array.prototype.reduce.call(l.__data__, f, i)\n\n\nexport default curry(fold)\n"]}