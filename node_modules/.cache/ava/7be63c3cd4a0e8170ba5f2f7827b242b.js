'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _get = require('../../source/immut/get');

var _get2 = _interopRequireDefault(_get);

var _curry = require('../../source/utils/curry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _avaThrowsHelper(fn, data) {
  try {
    return fn();
  } catch (e) {
    var type = typeof e === 'undefined' ? 'undefined' : _typeof(e);

    if (e !== null && (type === "object" || type === "function")) {
      try {
        Object.defineProperty(e, "_avaThrowsHelperData", {
          value: data
        });
      } catch (e) {}
    }

    throw e;
  }
}

(0, _ava2.default)('immut#get: should be curryable', function (t) {
  t.is((0, _get2.default)(_curry._), _get2.default);
});

(0, _ava2.default)('immut#get: should access string keyed member on map type', function (t) {
  var k = 'a';
  var e = 'val';
  var i = { __data__: _defineProperty({}, k, e) };

  t.is((0, _get2.default)(i, k), e);
});

(0, _ava2.default)('immut#get: should access number keyed member on map type', function (t) {
  var k = 1;
  var e = 'val';
  var i = { __data__: _defineProperty({}, k, e) };

  t.is((0, _get2.default)(i, k), e);
});

(0, _ava2.default)('immut#get: should access index on list type', function (t) {
  var k = 0;
  var e = 'val';
  var i = { __data__: [e] };

  t.is((0, _get2.default)(i, k), e);
});

(0, _ava2.default)('immut#get: should error on bad key of map type', function (t) {
  var k = 1;
  var e = 'val';
  var i = { __data__: _defineProperty({}, 2, e) };

  t.throws(_avaThrowsHelper(function () {
    return function () {
      return (0, _get2.default)(i, k);
    };
  }, {
    line: 43,
    column: 11,
    source: '() => get(i, k)',
    filename: '/Users/leon/Development/Javascript/immut/tests/immut/get.spec.js'
  }), ReferenceError);
});

(0, _ava2.default)('immut#get: should error on bad key of list type', function (t) {
  var k = 1;
  var e = 'val';
  var i = { __data__: [e] };

  t.throws(_avaThrowsHelper(function () {
    return function () {
      return (0, _get2.default)(i, k);
    };
  }, {
    line: 51,
    column: 11,
    source: '() => get(i, k)',
    filename: '/Users/leon/Development/Javascript/immut/tests/immut/get.spec.js'
  }), ReferenceError);
});
//# sourceMappingURL=../../node_modules/.cache/ava/7be63c3cd4a0e8170ba5f2f7827b242b.js.map