{"version":3,"sources":["partition.spec.js"],"names":["t","is","l1","__data__","__size__","l2","l3","deepEqual","v"],"mappings":";;;;AAAA;;;;AAEA;;;;AAEA;;;;AAIA,mBAAK,qCAAL,EAA4C,aAAK;AAC/CA,IAAEC,EAAF,CAAK,kCAAL;AACD,CAFD;;AAKA,mBAAK,6DAAL,EAAoE,aAAK;AACvE,MAAMC,KAAK;AACTC,cAAU,EADD;AAETC,cAAU;AAFD,GAAX;;AADuE,mBAMpD,yBAAUF,EAAV,EAAc;AAAA,WAAM,IAAN;AAAA,GAAd,CANoD;AAAA;AAAA,MAM/DG,EAN+D;AAAA,MAM3DC,EAN2D;;AAQvEN,IAAEC,EAAF,CAAKI,GAAGD,QAAR,EAAkB,CAAlB;AACAJ,IAAEC,EAAF,CAAKK,GAAGF,QAAR,EAAkB,CAAlB;AACAJ,IAAEO,SAAF,CAAYF,GAAGF,QAAf,EAAyB,EAAzB;AACAH,IAAEO,SAAF,CAAYD,GAAGH,QAAf,EAAyB,EAAzB;AACD,CAZD;;AAcA,mBAAK,+CAAL,EAAsD,aAAK;AACzD,MAAMD,KAAK;AACTE,cAAU,CADD;AAETD,cAAU,CACR,CADQ,EAER,CAFQ,EAGR,CAHQ;AAFD,GAAX;;AADyD,oBAUtC,yBAAUD,EAAV,EAAc;AAAA,WAAKM,IAAI,CAAT;AAAA,GAAd,CAVsC;AAAA;AAAA,MAUjDH,EAViD;AAAA,MAU7CC,EAV6C;;AAazDN,IAAEC,EAAF,CAAKI,GAAGD,QAAR,EAAkB,CAAlB;AACAJ,IAAEC,EAAF,CAAKK,GAAGF,QAAR,EAAkB,CAAlB;AACAJ,IAAEO,SAAF,CAAYF,GAAGF,QAAf,EAAyB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAzB;AACAH,IAAEO,SAAF,CAAYD,GAAGH,QAAf,EAAyB,EAAzB;AACD,CAjBD;;AAoBA,mBAAK,qDAAL,EAA4D,aAAK;AAC/D,MAAMD,KAAK;AACTE,cAAU,CADD;AAETD,cAAU,CACR,CADQ,EAER,CAFQ,EAGR,CAAC,CAHO;AAFD,GAAX;;AAD+D,oBAU5C,yBAAUD,EAAV,EAAc;AAAA,WAAKM,IAAI,CAAT;AAAA,GAAd,CAV4C;AAAA;AAAA,MAUvDH,EAVuD;AAAA,MAUnDC,EAVmD;;AAa/DN,IAAEC,EAAF,CAAKI,GAAGD,QAAR,EAAkB,CAAlB;AACAJ,IAAEC,EAAF,CAAKK,GAAGF,QAAR,EAAkB,CAAlB;AACAJ,IAAEO,SAAF,CAAYF,GAAGF,QAAf,EAAyB,CAAE,CAAC,CAAH,CAAzB;AACAH,IAAEO,SAAF,CAAYD,GAAGH,QAAf,EAAyB,CAAE,CAAF,EAAK,CAAL,CAAzB;AACD,CAjBD","file":"partition.spec.js","sourcesContent":["import test from 'ava'\n\nimport partition from '../../source/list/partition'\n\nimport {\n  _,\n} from '../../source/utils/curry.js'\n\ntest('list#partition: should be curryable', t => {\n  t.is(partition(_), partition)\n})\n\n\ntest('list#partition: should return left and right as empty lists', t => {\n  const l1 = {\n    __data__: [],\n    __size__: 0,\n  }\n\n  const [ l2, l3 ] = partition(l1, () => true)\n\n  t.is(l2.__size__, 0)\n  t.is(l3.__size__, 0)\n  t.deepEqual(l2.__data__, [])\n  t.deepEqual(l3.__data__, [])\n})\n\ntest('list#partition: should return all to the left', t => {\n  const l1 = {\n    __size__: 3,\n    __data__: [\n      1,\n      2,\n      3,\n    ]\n  }\n\n  const [ l2, l3 ] = partition(l1, v => v > 0)\n\n\n  t.is(l2.__size__, 3)\n  t.is(l3.__size__, 0)\n  t.deepEqual(l2.__data__, [ 1, 2, 3 ])\n  t.deepEqual(l3.__data__, [])\n})\n\n\ntest('list#partition: should return mix of left and right', t => {\n  const l1 = {\n    __size__: 3,\n    __data__: [\n      1,\n      2,\n      -1,\n    ]\n  }\n\n  const [ l2, l3 ] = partition(l1, v => v < 0)\n\n\n  t.is(l2.__size__, 1)\n  t.is(l3.__size__, 2)\n  t.deepEqual(l2.__data__, [ -1 ])\n  t.deepEqual(l3.__data__, [ 1, 2 ])\n})\n"]}