{"version":3,"sources":["of.spec.js"],"names":["e0","__type__","map","__data__","__size__","undefined","i1","e1","i2","propOne","e2","i3","nestedOne","e3","i4","e4","i5","e5"],"mappings":";;;;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAIA,IAAMA,KAAK;AACTC,YAAU,kBAAQC,GADT;AAETC,YAAU,EAFD;AAGTC,YAAU;AAHD,CAAX;;AAMA,mBAAK,wCAAL,mBAAuDC,SAAvD,EAAkEL,EAAlE;;AAGA,IAAMM,KAAK,EAAX;AACA,IAAMC,KAAK;AACTN,YAAU,kBAAQC,GADT;AAETC,YAAU,EAFD;AAGTC,YAAU;AAHD,CAAX;;AAMA,mBAAK,iCAAL,mBAAgDE,EAAhD,EAAoDC,EAApD;;AAIA,IAAMC,KAAK,EAAEC,SAAS,WAAX,EAAX;AACA,IAAMC,KAAK;AACTT,YAAU,kBAAQC,GADT;AAETC,yBAAeK,EAAf,CAFS;AAGTJ,YAAU;AAHD,CAAX;;AAMA,mBAAK,4CAAL,mBAA2DI,EAA3D,EAA+DE,EAA/D;;AAIA,IAAMC,KAAK,EAAEC,WAAW,EAAb,EAAX;AACA,IAAMC,KAAK;AACTZ,YAAU,kBAAQC,GADT;AAETC,yBAAeQ,EAAf,CAFS;AAGTP,YAAU;AAHD,CAAX;;AAMA,mBAAK,6CAAL,mBAA4DO,EAA5D,EAAgEE,EAAhE;;AAIA,IAAMC,KAAK,EAAEF,WAAW,EAAb,EAAiBH,SAAS,WAA1B,EAAX;AACA,IAAMM,KAAK;AACTd,YAAU,kBAAQC,GADT;AAETC,yBAAeW,EAAf,CAFS;AAGTV,YAAU;AAHD,CAAX;;AAMA,mBAAK,4CAAL,mBAA2DU,EAA3D,EAA+DC,EAA/D;;AAIA,IAAMC,KAAK,kBAAG,EAAEP,SAAS,WAAX,EAAH,CAAX;AACA,IAAMQ,KAAK;AACThB,YAAU,kBAAQC,GADT;AAETC,yBAAea,GAAGb,QAAlB,CAFS;AAGTC,YAAU;AAHD,CAAX;;AAMA,mBAAK,kCAAL,mBAAiDY,EAAjD,EAAqDC,EAArD","file":"of.spec.js","sourcesContent":["import test from 'ava'\n\nimport Symbols from '../../source/consts/symbols'\nimport of      from '../../source/map/of'\n\nimport { testOf } from '../helpers'\n\n\n\nconst e0 = {\n  __type__: Symbols.map,\n  __data__: {},\n  __size__: 0,\n}\n\ntest('map#of: should return map of undefined', testOf, undefined, e0, of)\n\n\nconst i1 = {}\nconst e1 = {\n  __type__: Symbols.map,\n  __data__: {},\n  __size__: 0,\n}\n\ntest('map#of: should return map of {}', testOf, i1, e1, of)\n\n\n\nconst i2 = { propOne: 'primitive' }\nconst e2 = {\n  __type__: Symbols.map,\n  __data__: { ...i2 },\n  __size__: 1,\n}\n\ntest('map#of: should return map of {} with props', testOf, i2, e2, of)\n\n\n\nconst i3 = { nestedOne: {} }\nconst e3 = {\n  __type__: Symbols.map,\n  __data__: { ...i3 },\n  __size__: 1,\n}\n\ntest('map#of: should return map of {} with nested', testOf, i3, e3, of)\n\n\n\nconst i4 = { nestedOne: {}, propOne: 'primitive' }\nconst e4 = {\n  __type__: Symbols.map,\n  __data__: { ...i4 },\n  __size__: 2,\n}\n\ntest('map#of: should return map of complex shape', testOf, i4, e4, of)\n\n\n\nconst i5 = of({ propOne: 'primitive' })\nconst e5 = {\n  __type__: Symbols.map,\n  __data__: { ...i5.__data__ },\n  __size__: 1,\n}\n\ntest('map#of: should return map of map', testOf, i5, e5, of)\n"]}