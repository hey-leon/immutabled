{"version":3,"sources":["of.spec.js"],"names":["e0","__type__","list","__data__","__size__","undefined","i1","e1","i2","e2","i3","e3","i4","e4","i5","e5"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;AAIA,IAAMA,KAAK;AACTC,YAAU,kBAAQC,IADT;AAETC,YAAU,EAFD;AAGTC,YAAU;AAHD,CAAX;;AAMA,mBAAK,0CAAL,mBAAyDC,SAAzD,EAAoEL,EAApE;;AAGA,IAAMM,KAAK,EAAX;AACA,IAAMC,KAAK;AACTN,YAAU,kBAAQC,IADT;AAETC,YAAU,EAFD;AAGTC,YAAU;AAHD,CAAX;;AAMA,mBAAK,mCAAL,mBAAkDE,EAAlD,EAAsDC,EAAtD;;AAIA,IAAMC,KAAK,CAAE,WAAF,CAAX;AACA,IAAMC,KAAK;AACTR,YAAU,kBAAQC,IADT;AAETC,sBAAeK,EAAf,CAFS;AAGTJ,YAAU;AAHD,CAAX;;AAMA,mBAAK,8CAAL,mBAA6DI,EAA7D,EAAiEC,EAAjE;;AAIA,IAAMC,KAAK,CAAE,EAAF,CAAX;AACA,IAAMC,KAAK;AACTV,YAAU,kBAAQC,IADT;AAETC,sBAAeO,EAAf,CAFS;AAGTN,YAAU;AAHD,CAAX;;AAMA,mBAAK,+CAAL,mBAA8DM,EAA9D,EAAkEC,EAAlE;;AAIA,IAAMC,KAAK,CAAE,EAAF,EAAM,WAAN,CAAX;AACA,IAAMC,KAAK;AACTZ,YAAU,kBAAQC,IADT;AAETC,sBAAeS,EAAf,CAFS;AAGTR,YAAU;AAHD,CAAX;;AAMA,mBAAK,8CAAL,mBAA6DQ,EAA7D,EAAiEC,EAAjE;;AAIA,IAAMC,KAAK,kBAAG,CAAE,WAAF,CAAH,CAAX;AACA,IAAMC,KAAK;AACTd,YAAU,kBAAQC,IADT;AAETC,yCAAeW,GAAGX,QAAlB,EAFS;AAGTC,YAAU;AAHD,CAAX;;AAMA,mBAAK,qCAAL,mBAAoDU,EAApD,EAAwDC,EAAxD","file":"of.spec.js","sourcesContent":["import test from 'ava'\n\nimport Symbols from '../../source/consts/symbols'\nimport of      from '../../source/list/of'\n\nimport { testOf } from '../helpers'\n\n\n\nconst e0 = {\n  __type__: Symbols.list,\n  __data__: [],\n  __size__: 0,\n}\n\ntest('list#of: should return list of undefined', testOf, undefined, e0, of)\n\n\nconst i1 = []\nconst e1 = {\n  __type__: Symbols.list,\n  __data__: [],\n  __size__: 0,\n}\n\ntest('list#of: should return list of {}', testOf, i1, e1, of)\n\n\n\nconst i2 = [ 'primitive' ]\nconst e2 = {\n  __type__: Symbols.list,\n  __data__: [ ...i2 ],\n  __size__: 1,\n}\n\ntest('list#of: should return list of {} with props', testOf, i2, e2, of)\n\n\n\nconst i3 = [ {} ]\nconst e3 = {\n  __type__: Symbols.list,\n  __data__: [ ...i3 ],\n  __size__: 1,\n}\n\ntest('list#of: should return list of {} with nested', testOf, i3, e3, of)\n\n\n\nconst i4 = [ {}, 'primitive' ]\nconst e4 = {\n  __type__: Symbols.list,\n  __data__: [ ...i4 ],\n  __size__: 2,\n}\n\ntest('list#of: should return list of complex shape', testOf, i4, e4, of)\n\n\n\nconst i5 = of([ 'primitive' ])\nconst e5 = {\n  __type__: Symbols.list,\n  __data__: [ ...i5.__data__ ],\n  __size__: 1,\n}\n\ntest('list#of: should return list of list', testOf, i5, e5, of)\n"]}