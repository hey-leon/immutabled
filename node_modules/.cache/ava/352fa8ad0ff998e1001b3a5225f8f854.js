'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _from = require('../../source/immut/from');

var _from2 = _interopRequireDefault(_from);

var _list = require('../../source/list');

var _list2 = _interopRequireDefault(_list);

var _map = require('../../source/map');

var _map2 = _interopRequireDefault(_map);

var _curry = require('../../source/utils/curry');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _avaThrowsHelper(fn, data) {
  try {
    return fn();
  } catch (e) {
    var type = typeof e === 'undefined' ? 'undefined' : _typeof(e);

    if (e !== null && (type === "object" || type === "function")) {
      try {
        Object.defineProperty(e, "_avaThrowsHelperData", {
          value: data
        });
      } catch (e) {}
    }

    throw e;
  }
}

//
// NOTE: from is internally known as parse
//


(0, _ava2.default)('immut#from: should be curryable', function (t) {
  t.is((0, _from2.default)(_curry._), _from2.default);
});

(0, _ava2.default)('immut#from: should parse simple map', function (t) {
  var shape = {
    type: _map2.default.type,
    keys: {
      a: '',
      b: 33
    }
  };

  t.deepEqual((0, _from2.default)(shape, { a: 'holla', b: 10 }), _map2.default.of({
    a: 'holla',
    b: 10
  }));
});

(0, _ava2.default)('immut#from: should strip excess keys on map', function (t) {
  var shape = {
    type: _map2.default.type,
    keys: {
      b: 33
    }
  };

  t.deepEqual((0, _from2.default)(shape, { a: 'holla', b: 33 }), _map2.default.of({
    b: 33
  }));
});

(0, _ava2.default)('immut#from: should add defaults for missing keys', function (t) {
  var shape = {
    type: _map2.default.type,
    keys: {
      b: 33,
      c: 'yolo'
    }
  };

  t.deepEqual((0, _from2.default)(shape, { b: 22 }), _map2.default.of({
    b: 22,
    c: 'yolo'
  }));
});

(0, _ava2.default)('immut#from: should parse simple list', function (t) {
  var shape = {
    type: _list2.default.type,
    item: 0
  };

  t.deepEqual((0, _from2.default)(shape, [10, 22, 11]), _list2.default.of([10, 22, 11]));
});

(0, _ava2.default)('immut#from: should parse map of maps', function (t) {
  var shape = {
    type: _map2.default.type,
    keys: {
      b: 33,
      c: {
        type: _map2.default.type,
        keys: {
          a: "kubernetes",
          b: "docker"
        }
      }
    }
  };

  t.deepEqual((0, _from2.default)(shape, { b: 1, c: { b: "compose" } }), _map2.default.of({
    b: 1,
    c: _map2.default.of({
      a: "kubernetes",
      b: "compose"
    })
  }));
});

(0, _ava2.default)('immut#from: should parse list of lists', function (t) {
  var shape = {
    type: _list2.default.type,
    item: {
      type: _list2.default.type,
      item: 0
    }
  };

  t.deepEqual((0, _from2.default)(shape, [[], [], [], []]), _list2.default.of([_list2.default.of(), _list2.default.of(), _list2.default.of(), _list2.default.of()]));
});

(0, _ava2.default)('immut#from: should parse complex shape', function (t) {
  var shape = {
    type: _list2.default.type,
    item: {
      type: _map2.default.type,
      keys: {
        b: 33,
        c: {
          type: _list2.default.type,
          item: 0
        }
      }
    }
  };

  t.deepEqual((0, _from2.default)(shape, [{ b: 22 }, { c: [10, 11] }, {}]), _list2.default.of([_map2.default.of({ b: 22, c: _list2.default.of() }), _map2.default.of({ b: 33, c: _list2.default.of([10, 11]) }), _map2.default.of({ b: 33, c: _list2.default.of() })]));
});

(0, _ava2.default)('ofMap: should throw if d !== {}', function (t) {
  t.throws(_avaThrowsHelper(function () {
    return function () {
      return (0, _from.ofMap)(null, '');
    };
  }, {
    line: 176,
    column: 11,
    source: '() => ofMap(null, \'\')',
    filename: '/Users/leon/Development/Javascript/immut/tests/immut/from.spec.js'
  }), TypeError);
});

(0, _ava2.default)('ofList: should throw if d !== []', function (t) {
  t.throws(_avaThrowsHelper(function () {
    return function () {
      return (0, _from.ofList)(null, {});
    };
  }, {
    line: 181,
    column: 11,
    source: '() => ofList(null, {})',
    filename: '/Users/leon/Development/Javascript/immut/tests/immut/from.spec.js'
  }), TypeError);
});

(0, _ava2.default)('#ofList: should always return data if exists', function (t) {
  var d1 = 'holla world';
  var d2 = null;

  var s = 'holla space';

  t.is((0, _from.ofLeaf)(s, d1), d1);
  t.is((0, _from.ofLeaf)(s, d2), d2);
  t.is((0, _from.ofLeaf)(s, undefined), s);
});
//# sourceMappingURL=../../node_modules/.cache/ava/352fa8ad0ff998e1001b3a5225f8f854.js.map