'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _update = require('../../source/map/update');

var _update2 = _interopRequireDefault(_update);

var _curry = require('../../source/utils/curry');

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _ava2.default)('map#update: should be curryable', function (t) {
  t.is((0, _update2.default)(_curry._), _update2.default);
});

(0, _ava2.default)('map#update: should update value', function (t) {
  var _rec = new _powerAssertRecorder();

  var k = 'prop';
  var v = 1;

  var m1 = {
    __data__: _defineProperty({}, k, v),
    __size__: 1
  };

  var m2 = (0, _update2.default)(m1, k, function () {
    var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return v + 1;
  });

  t.true(_rec._expr(_rec._capt((0, _helpers.testRefs)(_rec._capt(m1, 'arguments/0/arguments/0'), _rec._capt(m2, 'arguments/0/arguments/1'), _rec._capt([_rec._capt(k, 'arguments/0/arguments/2/elements/0')], 'arguments/0/arguments/2')), 'arguments/0'), {
    content: 't.true(testRefs(m1, m2, [k]))',
    filepath: 'tests/map/update.spec.js',
    line: 27,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"testRefs","range":[7,15]},"arguments":[{"type":"Identifier","name":"m1","range":[16,18]},{"type":"Identifier","name":"m2","range":[20,22]},{"type":"ArrayExpression","elements":[{"type":"Identifier","name":"k","range":[25,26]}],"range":[24,27]}],"range":[7,28]}],"range":[0,29]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"testRefs","range":[7,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":"name"},"value":"m1","range":[16,18]},{"type":{"label":","},"range":[18,19]},{"type":{"label":"name"},"value":"m2","range":[20,22]},{"type":{"label":","},"range":[22,23]},{"type":{"label":"["},"range":[24,25]},{"type":{"label":"name"},"value":"k","range":[25,26]},{"type":{"label":"]"},"range":[26,27]},{"type":{"label":")"},"range":[27,28]},{"type":{"label":")"},"range":[28,29]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(m1.__data__[k], 1);
  t.is(m2.__data__[k], 2);
  t.is(m2.__size__, m1.__size__);
});

(0, _ava2.default)('map#update: should update when no value already', function (t) {
  var _rec2 = new _powerAssertRecorder();

  var k = 'prop';

  var m1 = {
    __data__: {},
    __size__: 0
  };

  var m2 = (0, _update2.default)(m1, k, function () {
    var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return v + 1;
  });

  t.true(_rec2._expr(_rec2._capt((0, _helpers.testRefs)(_rec2._capt(m1, 'arguments/0/arguments/0'), _rec2._capt(m2, 'arguments/0/arguments/1'), _rec2._capt([_rec2._capt(k, 'arguments/0/arguments/2/elements/0')], 'arguments/0/arguments/2')), 'arguments/0'), {
    content: 't.true(testRefs(m1, m2, [k]))',
    filepath: 'tests/map/update.spec.js',
    line: 44,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"testRefs","range":[7,15]},"arguments":[{"type":"Identifier","name":"m1","range":[16,18]},{"type":"Identifier","name":"m2","range":[20,22]},{"type":"ArrayExpression","elements":[{"type":"Identifier","name":"k","range":[25,26]}],"range":[24,27]}],"range":[7,28]}],"range":[0,29]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"testRefs","range":[7,15]},{"type":{"label":"("},"range":[15,16]},{"type":{"label":"name"},"value":"m1","range":[16,18]},{"type":{"label":","},"range":[18,19]},{"type":{"label":"name"},"value":"m2","range":[20,22]},{"type":{"label":","},"range":[22,23]},{"type":{"label":"["},"range":[24,25]},{"type":{"label":"name"},"value":"k","range":[25,26]},{"type":{"label":"]"},"range":[26,27]},{"type":{"label":")"},"range":[27,28]},{"type":{"label":")"},"range":[28,29]}]',
    visitorKeys: _powerAssertVisitorKeys
  }));
  t.is(m1.__data__[k], undefined);
  t.is(m2.__data__[k], 1);
  t.is(m2.__size__, m1.__size__ + 1);
});
//# sourceMappingURL=../../node_modules/.cache/ava/78956be4517e30acd005bb7a9dcfcb3a.js.map