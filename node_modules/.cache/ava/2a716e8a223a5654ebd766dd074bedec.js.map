{"version":3,"sources":["merge.spec.js"],"names":["t","is","m1","__data__","p","__size__","m2","b","m3","not","deepEqual","Object","keys","Set","a","c"],"mappings":";;AAAA;;;;AAEA;;;;AAEA;;;;;;AAKA,mBAAK,gCAAL,EAAuC,aAAK;AAC1CA,IAAEC,EAAF,CAAK,8BAAL;AACD,CAFD;;AAKA,mBAAK,+BAAL,EAAsC,aAAK;AACzC,MAAMC,KAAK,EAAEC,UAAU,EAAEC,GAAG,CAAL,EAAZ,EAAsBC,UAAU,CAAhC,EAAX;AACA,MAAMC,KAAK,EAAEH,UAAU,EAAEI,GAAG,CAAL,EAAZ,EAAsBF,UAAU,CAAhC,EAAX;;AAEA,MAAMG,KAAK,qBAAMN,EAAN,EAAUI,EAAV,CAAX;AACAN,IAAES,GAAF,CAAMD,EAAN,EAAUN,EAAV;AACAF,IAAES,GAAF,CAAMD,EAAN,EAAUF,EAAV;AACAN,IAAES,GAAF,CAAMD,GAAGL,QAAT,EAAmBD,GAAGC,QAAtB;AACAH,IAAES,GAAF,CAAMD,GAAGL,QAAT,EAAmBG,GAAGH,QAAtB;AACAH,IAAEU,SAAF,CAAYC,OAAOC,IAAP,CAAYJ,GAAGL,QAAf,CAAZ,+BACK,IAAIU,GAAJ,8BACEF,OAAOC,IAAP,CAAYV,GAAGC,QAAf,CADF,sBAEEQ,OAAOC,IAAP,CAAYN,GAAGH,QAAf,CAFF,GADL;AAMAH,IAAEU,SAAF,CAAYF,GAAGL,QAAf,EAAyB,EAAEC,GAAG,CAAL,EAAQG,GAAG,CAAX,EAAzB;AACAP,IAAEC,EAAF,CAAKO,GAAGH,QAAR,EAAkB,CAAlB;AACD,CAjBD;;AAoBA,mBAAK,8CAAL,EAAqD,aAAK;AACxD,MAAMH,KAAK,EAAEC,UAAU,EAAEW,GAAG,CAAL,EAAQP,GAAG,CAAX,EAAZ,EAA4BF,UAAU,CAAtC,EAAX;AACA,MAAMC,KAAK,EAAEH,UAAU,EAAEI,GAAG,CAAL,EAAQQ,GAAG,CAAX,EAAZ,EAA4BV,UAAU,CAAtC,EAAX;;AAEA,MAAMG,KAAK,qBAAMN,EAAN,EAAUI,EAAV,CAAX;AACAN,IAAES,GAAF,CAAMD,EAAN,EAAUN,EAAV;AACAF,IAAES,GAAF,CAAMD,EAAN,EAAUF,EAAV;AACAN,IAAES,GAAF,CAAMD,GAAGL,QAAT,EAAmBD,GAAGC,QAAtB;AACAH,IAAES,GAAF,CAAMD,GAAGL,QAAT,EAAmBG,GAAGH,QAAtB;AACAH,IAAEU,SAAF,CAAYC,OAAOC,IAAP,CAAYJ,GAAGL,QAAf,CAAZ,+BACK,IAAIU,GAAJ,8BACEF,OAAOC,IAAP,CAAYV,GAAGC,QAAf,CADF,sBAEEQ,OAAOC,IAAP,CAAYN,GAAGH,QAAf,CAFF,GADL;AAMAH,IAAEU,SAAF,CAAYF,GAAGL,QAAf,EAAyB,EAAEW,GAAG,CAAL,EAAQP,GAAG,CAAX,EAAcQ,GAAG,CAAjB,EAAzB;AACAf,IAAEC,EAAF,CAAKO,GAAGH,QAAR,EAAkB,CAAlB;AACD,CAjBD","file":"merge.spec.js","sourcesContent":["import test from 'ava'\n\nimport merge from '../../source/map/merge'\n\nimport {\n  _,\n} from '../../source/utils/curry'\n\n\ntest('map#merge: should be curryable', t => {\n  t.is(merge(_), merge)\n})\n\n\ntest('map#merge: should merge value', t => {\n  const m1 = { __data__: { p: 1 }, __size__: 1 }\n  const m2 = { __data__: { b: 1 }, __size__: 1 }\n\n  const m3 = merge(m1, m2)\n  t.not(m3, m1)\n  t.not(m3, m2)\n  t.not(m3.__data__, m1.__data__)\n  t.not(m3.__data__, m2.__data__)\n  t.deepEqual(Object.keys(m3.__data__), [\n    ...new Set([\n      ...Object.keys(m1.__data__),\n      ...Object.keys(m2.__data__)\n    ])\n  ])\n  t.deepEqual(m3.__data__, { p: 1, b: 1 })\n  t.is(m3.__size__, 2)\n})\n\n\ntest('map#merge: should merge value overwriting m1', t => {\n  const m1 = { __data__: { a: 1, b: 3 }, __size__: 1 }\n  const m2 = { __data__: { b: 1, c: 9 }, __size__: 1 }\n\n  const m3 = merge(m1, m2)\n  t.not(m3, m1)\n  t.not(m3, m2)\n  t.not(m3.__data__, m1.__data__)\n  t.not(m3.__data__, m2.__data__)\n  t.deepEqual(Object.keys(m3.__data__), [\n    ...new Set([\n      ...Object.keys(m1.__data__),\n      ...Object.keys(m2.__data__)\n    ])\n  ])\n  t.deepEqual(m3.__data__, { a: 1, b: 1, c: 9 })\n  t.is(m3.__size__, 3)\n})\n"]}