'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _partition7 = require('../../source/list/partition');

var _partition8 = _interopRequireDefault(_partition7);

var _curry = require('../../source/utils/curry.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('list#partition: should be curryable', function (t) {
  t.is((0, _partition8.default)(_curry._), _partition8.default);
});

(0, _ava2.default)('list#partition: should return left and right as empty lists', function (t) {
  var l1 = {
    __data__: [],
    __size__: 0
  };

  var _partition = (0, _partition8.default)(l1, function () {
    return true;
  }),
      _partition2 = _slicedToArray(_partition, 2),
      l2 = _partition2[0],
      l3 = _partition2[1];

  t.is(l2.__size__, 0);
  t.is(l3.__size__, 0);
  t.deepEqual(l2.__data__, []);
  t.deepEqual(l3.__data__, []);
});

(0, _ava2.default)('list#partition: should return all to the left', function (t) {
  var l1 = {
    __size__: 3,
    __data__: [1, 2, 3]
  };

  var _partition3 = (0, _partition8.default)(l1, function (v) {
    return v > 0;
  }),
      _partition4 = _slicedToArray(_partition3, 2),
      l2 = _partition4[0],
      l3 = _partition4[1];

  t.is(l2.__size__, 3);
  t.is(l3.__size__, 0);
  t.deepEqual(l2.__data__, [1, 2, 3]);
  t.deepEqual(l3.__data__, []);
});

(0, _ava2.default)('list#partition: should return mix of left and right', function (t) {
  var l1 = {
    __size__: 3,
    __data__: [1, 2, -1]
  };

  var _partition5 = (0, _partition8.default)(l1, function (v) {
    return v < 0;
  }),
      _partition6 = _slicedToArray(_partition5, 2),
      l2 = _partition6[0],
      l3 = _partition6[1];

  t.is(l2.__size__, 1);
  t.is(l3.__size__, 2);
  t.deepEqual(l2.__data__, [-1]);
  t.deepEqual(l3.__data__, [1, 2]);
});
//# sourceMappingURL=../../node_modules/.cache/ava/8c9eea4271494cd941a139f5b73ffe3f.js.map