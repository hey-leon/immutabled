{"version":3,"sources":["index.spec.js"],"names":["t","true","type","list","of","Function","apply","size","del","data","get","set","update","push","pop","indexOf","filter","partition","concat","every","some","find","findIndex","has","map","fold","sort"],"mappings":"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","file":"index.spec.js","sourcesContent":["import test from 'ava'\n\nimport list from '../../source/list'\n\nimport symbols from '../../source/consts/symbols'\n\n\ntest('exports: type is symbols.list', t => {\n  t.true(list.type === symbols.list)\n})\n\n\ntest('exports: of is included', t => {\n  t.true(list.of instanceof Function)\n})\n\n\ntest('exports: apply is included', t => {\n  t.true(list.apply instanceof Function)\n})\n\ntest('exports: size is included', t => {\n  t.true(list.size instanceof Function)\n})\n\ntest('exports: del is included', t => {\n  t.true(list.del instanceof Function)\n})\n\n\ntest('exports: data is included', t => {\n  t.true(list.data instanceof Function)\n})\n\n\ntest('exports: get is included', t => {\n  t.true(list.get instanceof Function)\n})\n\n\ntest('exports: set is included', t => {\n  t.true(list.set instanceof Function)\n})\n\n\ntest('exports: update is included', t => {\n  t.true(list.update instanceof Function)\n})\n\n\ntest('exports: push is included', t => {\n  t.true(list.push instanceof Function)\n})\n\n\ntest('exports: pop is included', t => {\n  t.true(list.pop instanceof Function)\n})\n\n\ntest('exports: indexOf is included', t => {\n  t.true(list.indexOf instanceof Function)\n})\n\n\ntest('exports: filter is included', t => {\n  t.true(list.filter instanceof Function)\n})\n\n\ntest('exports: partition is included', t => {\n  t.true(list.partition instanceof Function)\n})\n\n\ntest('exports: concat is included', t => {\n  t.true(list.concat instanceof Function)\n})\n\ntest('exports: every is included', t => {\n  t.true(list.every instanceof Function)\n})\n\n\ntest('exports: some is included', t => {\n  t.true(list.some instanceof Function)\n})\n\n\ntest('exports: find is included', t => {\n  t.true(list.find instanceof Function)\n})\n\n\ntest('exports: findIndex is included', t => {\n  t.true(list.findIndex instanceof Function)\n})\n\n\ntest('exports: has is included', t => {\n  t.true(list.has instanceof Function)\n})\n\n\ntest('exports: map is included', t => {\n  t.true(list.map instanceof Function)\n})\n\n\ntest('exports: fold is included', t => {\n  t.true(list.fold instanceof Function)\n})\n\n\ntest('exports: sort is included', t => {\n  t.true(list.sort instanceof Function)\n})\n"]}