'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _apply = require('../../source/immut/apply');

var _apply2 = _interopRequireDefault(_apply);

var _symbols = require('../../source/consts/symbols');

var _symbols2 = _interopRequireDefault(_symbols);

var _curry = require('../../source/utils/curry.js');

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _avaThrowsHelper(fn, data) {
  try {
    return fn();
  } catch (e) {
    var type = typeof e === 'undefined' ? 'undefined' : _typeof(e);

    if (e !== null && (type === "object" || type === "function")) {
      try {
        Object.defineProperty(e, "_avaThrowsHelperData", {
          value: data
        });
      } catch (e) {}
    }

    throw e;
  }
}

(0, _ava2.default)('immut#apply: should be curryable', function (t) {
  t.is((0, _apply2.default)(_curry._), _apply2.default);
});

(0, _ava2.default)('immut#apply: should error if data type is not an immut', function (t) {
  t.throws(_avaThrowsHelper(function () {
    return function () {
      return (0, _apply2.default)({}, ['p'], function (f) {
        return f;
      });
    };
  }, {
    line: 18,
    column: 11,
    source: '() => apply({}, [ \'p\' ], f => f)',
    filename: '/Users/leon/Development/Javascript/immut/tests/immut/apply.spec.js'
  }), TypeError);
});

(0, _ava2.default)('immut#apply: should error if immut does not contain key', function (t) {
  var m = {
    __data__: {}
  };

  t.throws(_avaThrowsHelper(function () {
    return function () {
      return (0, _apply2.default)(m, ['p'], function (f) {
        return f;
      });
    };
  }, {
    line: 27,
    column: 11,
    source: '() => apply(m, [ \'p\' ], f => f)',
    filename: '/Users/leon/Development/Javascript/immut/tests/immut/apply.spec.js'
  }), TypeError);
});

(0, _ava2.default)('immut#apply: should apply f to map type', function (t) {
  var path = ['p'];
  var m1 = {
    __type__: _symbols2.default.map,
    __data__: { p: 1 }
  };

  var m2 = (0, _apply2.default)(m1, path, function (f) {
    return f + 1;
  });

  t.not((0, _helpers.testRefs)(m1, m2, path));
  t.is(m2.__data__.p, 2);
});

(0, _ava2.default)('immut#apply: should apply f to list type', function (t) {
  var path = [1];
  var l1 = {
    __type__: _symbols2.default.list,
    __data__: [1, 4]
  };

  var l2 = (0, _apply2.default)(l1, path, function (f) {
    return f + 1;
  });

  t.not((0, _helpers.testRefs)(l1, l2, path));
  t.is(l2.__data__[1], 5);
});

(0, _ava2.default)('immut#apply: should apply f to nested map types', function (t) {
  var path = ['nestedMap', 'p'];
  var m1 = {
    __type__: _symbols2.default.map,
    __data__: {
      nestedMap: {
        __type__: _symbols2.default.map,
        __data__: { p: 21 }
      }
    }
  };

  var m2 = (0, _apply2.default)(m1, path, function (f) {
    return f + 10;
  });

  t.not((0, _helpers.testRefs)(m1, m2, path));
  t.is(m2.__data__.nestedMap.__data__.p, 31);
});

(0, _ava2.default)('immut#apply: should apply f to nested list types', function (t) {
  var path = [1, 3];
  var l1 = {
    __type__: _symbols2.default.list,
    __data__: ['zero', {
      __type__: _symbols2.default.list,
      __data__: [0, 1, 2, 'three']
    }]
  };

  var l2 = (0, _apply2.default)(l1, path, function (f) {
    return f + ' pees in a pod';
  });

  t.not((0, _helpers.testRefs)(l1, l2, path));
  t.is(l2.__data__[1].__data__[3], 'three pees in a pod');
});

(0, _ava2.default)('immut#apply: should apply f to nested immut types', function (t) {
  var path = [1, 'p'];
  var m1 = {
    __type__: _symbols2.default.list,
    __data__: ['zero', {
      __type__: _symbols2.default.map,
      __data__: { p: -6 }
    }, 'two']
  };

  var m2 = (0, _apply2.default)(m1, path, function (f) {
    return f + 7;
  });

  t.not((0, _helpers.testRefs)(m1, m2, path));
  t.is(m2.__data__[1].__data__.p, 1);
});
//# sourceMappingURL=../../node_modules/.cache/ava/bdfcd8547aa99da9ae28cb48b6d89e51.js.map