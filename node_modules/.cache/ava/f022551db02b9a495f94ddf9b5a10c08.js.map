{"version":3,"sources":["has.spec.js"],"names":["t","is","v","l","__data__","Spy","spy","Array","prototype","includes","true","calledWith"],"mappings":";;;;;AAAA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAKA,mBAAK,+BAAL,EAAsC,aAAK;AACzCA,IAAEC,EAAF,CAAK,4BAAL;AACD,CAFD;;AAKA,mBAAK,4DAAL,EAAmE,aAAK;AAAA;;AACtE,MAAMC,IAAI,CAAV;AACA,MAAMC,IAAI;AACRC,cAAU,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR;AADF,GAAV;;AAIA,MAAMC,MAAM,gBAAMC,GAAN,CAAUC,MAAMC,SAAN,CAAgBC,QAA1B,EAAoC,MAApC,CAAZ;;AAEA,qBAAIN,CAAJ,EAAOD,CAAP;;AAEAF,IAAEU,IAAF,uBAAO,6CAAIC,UAAJ,YAAe,gDAAEP,QAAjB,yCAA2BF,CAA3B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAXD","file":"has.spec.js","sourcesContent":["import test from 'ava'\n\nimport Sinon from 'sinon'\n\nimport has from '../../source/list/has'\n\nimport {\n  _,\n} from '../../source/utils/curry.js'\n\n\ntest('list#has: should be curryable', t => {\n  t.is(has(_), has)\n})\n\n\ntest('list#has: should call Array.prototype.includes w/ __data__', t => {\n  const v = 2\n  const l = {\n    __data__: [ 1, 2, 3 ],\n  }\n\n  const Spy = Sinon.spy(Array.prototype.includes, 'call')\n\n  has(l, v)\n\n  t.true(Spy.calledWith(l.__data__, v))\n})\n"]}