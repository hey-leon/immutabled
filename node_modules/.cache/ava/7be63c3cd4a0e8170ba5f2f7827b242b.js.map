{"version":3,"sources":["get.spec.js"],"names":["t","is","k","e","i","__data__","throws","ReferenceError"],"mappings":";;;;AAAA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAKA,mBAAK,gCAAL,EAAuC,aAAK;AAC1CA,IAAEC,EAAF,CAAK,4BAAL;AACD,CAFD;;AAIA,mBAAK,0DAAL,EAAiE,aAAK;AACpE,MAAMC,IAAI,GAAV;AACA,MAAMC,IAAI,KAAV;AACA,MAAMC,IAAI,EAAEC,8BAAaH,CAAb,EAAiBC,CAAjB,CAAF,EAAV;;AAEAH,IAAEC,EAAF,CAAK,mBAAIG,CAAJ,EAAOF,CAAP,CAAL,EAAgBC,CAAhB;AACD,CAND;;AAQA,mBAAK,0DAAL,EAAiE,aAAK;AACpE,MAAMD,IAAI,CAAV;AACA,MAAMC,IAAI,KAAV;AACA,MAAMC,IAAI,EAAEC,8BAAaH,CAAb,EAAiBC,CAAjB,CAAF,EAAV;;AAEAH,IAAEC,EAAF,CAAK,mBAAIG,CAAJ,EAAOF,CAAP,CAAL,EAAgBC,CAAhB;AACD,CAND;;AAQA,mBAAK,6CAAL,EAAoD,aAAK;AACvD,MAAMD,IAAI,CAAV;AACA,MAAMC,IAAI,KAAV;AACA,MAAMC,IAAI,EAAEC,UAAU,CAAEF,CAAF,CAAZ,EAAV;;AAEAH,IAAEC,EAAF,CAAK,mBAAIG,CAAJ,EAAOF,CAAP,CAAL,EAAgBC,CAAhB;AACD,CAND;;AAQA,mBAAK,gDAAL,EAAuD,aAAK;AAC1D,MAAMD,IAAI,CAAV;AACA,MAAMC,IAAI,KAAV;AACA,MAAMC,IAAI,EAAEC,8BAAa,CAAb,EAAiBF,CAAjB,CAAF,EAAV;;AAEAH,IAAEM,MAAF;AAAA,WAAS;AAAA,aAAM,mBAAIF,CAAJ,EAAOF,CAAP,CAAN;AAAA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA0BK,cAA1B;AACD,CAND;;AAQA,mBAAK,iDAAL,EAAwD,aAAK;AAC3D,MAAML,IAAI,CAAV;AACA,MAAMC,IAAI,KAAV;AACA,MAAMC,IAAI,EAAEC,UAAU,CAAEF,CAAF,CAAZ,EAAV;;AAEAH,IAAEM,MAAF;AAAA,WAAS;AAAA,aAAM,mBAAIF,CAAJ,EAAOF,CAAP,CAAN;AAAA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA0BK,cAA1B;AACD,CAND","file":"get.spec.js","sourcesContent":["import test from 'ava'\n\nimport get from '../../source/immut/get'\n\nimport {\n  _,\n} from '../../source/utils/curry'\n\n\ntest('immut#get: should be curryable', t => {\n  t.is(get(_), get)\n})\n\ntest('immut#get: should access string keyed member on map type', t => {\n  const k = 'a'\n  const e = 'val'\n  const i = { __data__: { [k]: e } }\n\n  t.is(get(i, k), e)\n})\n\ntest('immut#get: should access number keyed member on map type', t => {\n  const k = 1\n  const e = 'val'\n  const i = { __data__: { [k]: e } }\n\n  t.is(get(i, k), e)\n})\n\ntest('immut#get: should access index on list type', t => {\n  const k = 0\n  const e = 'val'\n  const i = { __data__: [ e ] }\n\n  t.is(get(i, k), e)\n})\n\ntest('immut#get: should error on bad key of map type', t => {\n  const k = 1\n  const e = 'val'\n  const i = { __data__: { [2]: e } }\n\n  t.throws(() => get(i, k), ReferenceError)\n})\n\ntest('immut#get: should error on bad key of list type', t => {\n  const k = 1\n  const e = 'val'\n  const i = { __data__: [ e ] }\n\n  t.throws(() => get(i, k), ReferenceError)\n})\n"]}