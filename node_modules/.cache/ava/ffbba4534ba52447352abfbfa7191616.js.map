{"version":3,"sources":["is.spec.js"],"names":["t","false","NaN","true","__type__","map","list"],"mappings":"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","file":"is.spec.js","sourcesContent":["import test from 'ava'\n\nimport symbols from '../../source/consts/symbols'\n\nimport {\n  isImmut,\n  isList,\n  isMap,\n  isArray,\n  isObject,\n  isPrimitive,\n} from '../../source/utils/is'\n\n\ntest('#isImmut: should only return true for immut tyoes', t => {\n  t.false(isImmut())\n  t.false(isImmut(null))\n  t.false(isImmut(1))\n  t.false(isImmut(''))\n  t.false(isImmut(NaN))\n  t.false(isImmut([]))\n  t.false(isImmut({}))\n  t.true(isImmut({ __type__: symbols.map }))\n  t.true(isImmut({ __type__: symbols.list }))\n})\n\n\ntest('#isList: should only return true for list', t => {\n  t.false(isList())\n  t.false(isList(null))\n  t.false(isList(1))\n  t.false(isList(''))\n  t.false(isList(NaN))\n  t.false(isList([]))\n  t.false(isList({}))\n  t.false(isList({ __type__: symbols.map }))\n  t.true(isList({ __type__: symbols.list }))\n})\n\n\ntest('#isMap: should only return true for map', t => {\n  t.false(isMap())\n  t.false(isMap(null))\n  t.false(isMap(1))\n  t.false(isMap(''))\n  t.false(isMap(NaN))\n  t.false(isMap([]))\n  t.false(isMap({}))\n  t.false(isMap({ __type__: symbols.list }))\n  t.true(isMap({ __type__: symbols.map }))\n})\n\n\ntest('#isArray: should only return true for array', t => {\n  t.false(isArray())\n  t.false(isArray(null))\n  t.false(isArray(1))\n  t.false(isArray(''))\n  t.false(isArray(NaN))\n  t.false(isArray({}))\n  t.false(isArray({ __type__: symbols.list }))\n  t.false(isArray({ __type__: symbols.map }))\n  t.true(isArray([]))\n})\n\n\ntest('#isObject: should only return true for object', t => {\n  t.false(isObject())\n  t.false(isObject(null))\n  t.false(isObject(1))\n  t.false(isObject(''))\n  t.false(isObject(NaN))\n  t.false(isObject([]))\n  t.false(isObject({ __type__: symbols.list }))\n  t.false(isObject({ __type__: symbols.map }))\n  t.true(isObject({}))\n})\n\n\ntest('#isPrimitive: should only return true for primitive', t => {\n  t.false(isPrimitive())\n  t.false(isPrimitive(null))\n  t.false(isPrimitive([]))\n  t.false(isPrimitive({}))\n  t.false(isPrimitive({ __type__: symbols.list }))\n  t.false(isPrimitive({ __type__: symbols.map }))\n  t.true(isPrimitive(1))\n  t.true(isPrimitive(''))\n  t.true(isPrimitive(NaN))\n})\n"]}