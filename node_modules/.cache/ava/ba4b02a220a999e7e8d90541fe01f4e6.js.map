{"version":3,"sources":["partition.spec.js"],"names":["t","is","m1","__data__","__size__","m2","m3","deepEqual","a","b","c","v"],"mappings":";;;;AAAA;;;;AAEA;;;;AAEA;;;;AAIA,mBAAK,oCAAL,EAA2C,aAAK;AAC9CA,IAAEC,EAAF,CAAK,kCAAL;AACD,CAFD;;AAKA,mBAAK,2DAAL,EAAkE,aAAK;AACrE,MAAMC,KAAK;AACTC,cAAU,EADD;AAETC,cAAU;AAFD,GAAX;;AADqE,mBAMlD,yBAAUF,EAAV,EAAc;AAAA,WAAM,IAAN;AAAA,GAAd,CANkD;AAAA;AAAA,MAM7DG,EAN6D;AAAA,MAMzDC,EANyD;;AAQrEN,IAAEC,EAAF,CAAKI,GAAGD,QAAR,EAAkB,CAAlB;AACAJ,IAAEC,EAAF,CAAKK,GAAGF,QAAR,EAAkB,CAAlB;AACAJ,IAAEO,SAAF,CAAYF,GAAGF,QAAf,EAAyB,EAAzB;AACAH,IAAEO,SAAF,CAAYD,GAAGH,QAAf,EAAyB,EAAzB;AACD,CAZD;;AAcA,mBAAK,8CAAL,EAAqD,aAAK;AACxD,MAAMD,KAAK;AACTE,cAAU,CADD;AAETD,cAAU;AACRK,SAAG,CADK;AAERC,SAAG,CAFK;AAGRC,SAAG;AAHK;AAFD,GAAX;;AADwD,oBAUrC,yBAAUR,EAAV,EAAc;AAAA,WAAKS,IAAI,CAAT;AAAA,GAAd,CAVqC;AAAA;AAAA,MAUhDN,EAVgD;AAAA,MAU5CC,EAV4C;;AAaxDN,IAAEC,EAAF,CAAKI,GAAGD,QAAR,EAAkB,CAAlB;AACAJ,IAAEC,EAAF,CAAKK,GAAGF,QAAR,EAAkB,CAAlB;AACAJ,IAAEO,SAAF,CAAYF,GAAGF,QAAf,EAAyB,EAAEK,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcC,GAAG,CAAjB,EAAzB;AACAV,IAAEO,SAAF,CAAYD,GAAGH,QAAf,EAAyB,EAAzB;AACD,CAjBD;;AAoBA,mBAAK,oDAAL,EAA2D,aAAK;AAC9D,MAAMD,KAAK;AACTE,cAAU,CADD;AAETD,cAAU;AACRK,SAAG,CADK;AAERC,SAAG,CAFK;AAGRC,SAAG,CAAC;AAHI;AAFD,GAAX;;AAD8D,oBAU3C,yBAAUR,EAAV,EAAc;AAAA,WAAKS,IAAI,CAAT;AAAA,GAAd,CAV2C;AAAA;AAAA,MAUtDN,EAVsD;AAAA,MAUlDC,EAVkD;;AAa9DN,IAAEC,EAAF,CAAKI,GAAGD,QAAR,EAAkB,CAAlB;AACAJ,IAAEC,EAAF,CAAKK,GAAGF,QAAR,EAAkB,CAAlB;AACAJ,IAAEO,SAAF,CAAYF,GAAGF,QAAf,EAAyB,EAAEO,GAAG,CAAC,CAAN,EAAzB;AACAV,IAAEO,SAAF,CAAYD,GAAGH,QAAf,EAAyB,EAAEK,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAzB;AACD,CAjBD","file":"partition.spec.js","sourcesContent":["import test from 'ava'\n\nimport partition from '../../source/map/partition'\n\nimport {\n  _,\n} from '../../source/utils/curry.js'\n\ntest('map#partition: should be curryable', t => {\n  t.is(partition(_), partition)\n})\n\n\ntest('map#partition: should return left and right as empty maps', t => {\n  const m1 = {\n    __data__: {},\n    __size__: 0,\n  }\n\n  const [ m2, m3 ] = partition(m1, () => true)\n\n  t.is(m2.__size__, 0)\n  t.is(m3.__size__, 0)\n  t.deepEqual(m2.__data__, {})\n  t.deepEqual(m3.__data__, {})\n})\n\ntest('map#partition: should return all to the left', t => {\n  const m1 = {\n    __size__: 3,\n    __data__: {\n      a: 1,\n      b: 2,\n      c: 3,\n    }\n  }\n\n  const [ m2, m3 ] = partition(m1, v => v > 0)\n\n\n  t.is(m2.__size__, 3)\n  t.is(m3.__size__, 0)\n  t.deepEqual(m2.__data__, { a: 1, b: 2, c: 3 })\n  t.deepEqual(m3.__data__, {})\n})\n\n\ntest('map#partition: should return mix of left and right', t => {\n  const m1 = {\n    __size__: 3,\n    __data__: {\n      a: 1,\n      b: 2,\n      c: -1,\n    }\n  }\n\n  const [ m2, m3 ] = partition(m1, v => v < 0)\n\n\n  t.is(m2.__size__, 1)\n  t.is(m3.__size__, 2)\n  t.deepEqual(m2.__data__, { c: -1 })\n  t.deepEqual(m3.__data__, { a: 1, b: 2 })\n})\n"]}