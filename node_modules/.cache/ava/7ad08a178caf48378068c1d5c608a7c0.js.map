{"version":3,"sources":["concat.spec.js"],"names":["t","is","l1","__data__","l2","__type__","list","Spy","spy","Array","prototype","concat","true","calledWith"],"mappings":";;;;;AAAA;;;;AAEA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAKA,mBAAK,kCAAL,EAAyC,aAAK;AAC5CA,IAAEC,EAAF,CAAK,+BAAL;AACD,CAFD;;AAKA,mBAAK,wCAAL,EAA+C,aAAK;AAClD,MAAMC,KAAK,EAAEC,UAAU,EAAZ,EAAX;AACA,MAAMC,KAAK,EAAED,UAAU,EAAZ,EAAX;;AAEAH,IAAEC,EAAF,CAAK,sBAAOC,EAAP,EAAWE,EAAX,EAAeC,QAApB,EAA8B,kBAAQC,IAAtC;AACD,CALD;;AAQA,mBAAK,6DAAL,EAAoE,aAAK;AAAA;;AACvE,MAAMJ,KAAK,EAAEC,UAAU,EAAZ,EAAX;AACA,MAAMC,KAAK,EAAED,UAAU,EAAZ,EAAX;;AAEA,MAAMI,MAAM,gBAAMC,GAAN,CAAUC,MAAMC,SAAN,CAAgBC,MAA1B,EAAkC,MAAlC,CAAZ;;AAEA,wBAAOT,EAAP,EAAWE,EAAX;;AAEAJ,IAAEY,IAAF,uBAAO,6CAAIC,UAAJ,YAAe,iDAAGV,QAAlB,yCAA4B,iDAAGA,QAA/B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CATD","file":"concat.spec.js","sourcesContent":["import test from 'ava'\n\nimport Sinon from 'sinon'\n\nimport symbols from '../../source/consts/symbols'\nimport concat  from '../../source/list/concat'\n\nimport {\n  _,\n} from '../../source/utils/curry.js'\n\n\ntest('list#concat: should be curryable', t => {\n  t.is(concat(_), concat)\n})\n\n\ntest('list#concat: should return a list type', t => {\n  const l1 = { __data__: [] }\n  const l2 = { __data__: [] }\n\n  t.is(concat(l1, l2).__type__, symbols.list)\n})\n\n\ntest('list#concat: should call Array.prototype.concat w/ __data__', t => {\n  const l1 = { __data__: [] }\n  const l2 = { __data__: [] }\n\n  const Spy = Sinon.spy(Array.prototype.concat, 'call')\n\n  concat(l1, l2)\n\n  t.true(Spy.calledWith(l1.__data__, l2.__data__))\n})\n"]}