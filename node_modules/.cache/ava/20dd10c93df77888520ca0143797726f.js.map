{"version":3,"sources":["index.spec.js"],"names":["t","true","type","map","of","Function","apply","size","data","get","set","update","merge","partition","pluck","del"],"mappings":";;;;;AAAA;;;;AAEA;;;;AAEA;;;;;;AAGA,mBAAK,8BAAL,EAAqC,aAAK;AAAA;;AACxCA,IAAEC,IAAF,uBAAO,gEAAIC,IAAJ,qCAAa,0DAAQC,GAArB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,yBAAL,EAAgC,aAAK;AAAA;;AACnCH,IAAEC,IAAF,yBAAO,kEAAIG,EAAJ,6CAAkBC,QAAlB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,4BAAL,EAAmC,aAAK;AAAA;;AACtCL,IAAEC,IAAF,yBAAO,kEAAIK,KAAJ,6CAAqBD,QAArB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,2BAAL,EAAkC,aAAK;AAAA;;AACrCL,IAAEC,IAAF,yBAAO,kEAAIM,IAAJ,6CAAoBF,QAApB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,2BAAL,EAAkC,aAAK;AAAA;;AACrCL,IAAEC,IAAF,yBAAO,kEAAIO,IAAJ,6CAAoBH,QAApB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,0BAAL,EAAiC,aAAK;AAAA;;AACpCL,IAAEC,IAAF,yBAAO,kEAAIQ,GAAJ,6CAAmBJ,QAAnB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,0BAAL,EAAiC,aAAK;AAAA;;AACpCL,IAAEC,IAAF,yBAAO,kEAAIS,GAAJ,6CAAmBL,QAAnB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,6BAAL,EAAoC,aAAK;AAAA;;AACvCL,IAAEC,IAAF,yBAAO,kEAAIU,MAAJ,6CAAsBN,QAAtB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,4BAAL,EAAmC,aAAK;AAAA;;AACtCL,IAAEC,IAAF,yBAAO,kEAAIW,KAAJ,6CAAqBP,QAArB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,gCAAL,EAAuC,aAAK;AAAA;;AAC1CL,IAAEC,IAAF,2BAAO,oEAAIY,SAAJ,8CAAyBR,QAAzB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAKA,mBAAK,4BAAL,EAAmC,aAAK;AAAA;;AACtCL,IAAEC,IAAF,2BAAO,oEAAIa,KAAJ,8CAAqBT,QAArB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD;;AAIA,mBAAK,0BAAL,EAAiC,aAAK;AAAA;;AACpCL,IAAEC,IAAF,2BAAO,oEAAIc,GAAJ,8CAAmBV,QAAnB,sBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAFD","file":"index.spec.js","sourcesContent":["import test from 'ava'\n\nimport map from '../../source/map'\n\nimport symbols from '../../source/consts/symbols'\n\n\ntest('exports: type is symbols.map', t => {\n  t.true(map.type === symbols.map)\n})\n\n\ntest('exports: of is included', t => {\n  t.true(map.of instanceof Function)\n})\n\n\ntest('exports: apply is included', t => {\n  t.true(map.apply instanceof Function)\n})\n\n\ntest('exports: size is included', t => {\n  t.true(map.size instanceof Function)\n})\n\n\ntest('exports: data is included', t => {\n  t.true(map.data instanceof Function)\n})\n\n\ntest('exports: get is included', t => {\n  t.true(map.get instanceof Function)\n})\n\n\ntest('exports: set is included', t => {\n  t.true(map.set instanceof Function)\n})\n\n\ntest('exports: update is included', t => {\n  t.true(map.update instanceof Function)\n})\n\n\ntest('exports: merge is included', t => {\n  t.true(map.merge instanceof Function)\n})\n\n\ntest('exports: partition is included', t => {\n  t.true(map.partition instanceof Function)\n})\n\n\ntest('exports: pluck is included', t => {\n  t.true(map.pluck instanceof Function)\n})\n\ntest('exports: del is included', t => {\n  t.true(map.del instanceof Function)\n})\n"]}