{"version":3,"sources":["pluck.spec.js"],"names":["t","is","ks","m","__data__","output","deepEqual","a","b","c","throws","ReferenceError"],"mappings":";;;;AAAA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAKA,mBAAK,gCAAL,EAAuC,aAAK;AAC1CA,IAAEC,EAAF,CAAK,8BAAL;AACD,CAFD;;AAKA,mBAAK,4CAAL,EAAmD,aAAK;AACtD,MAAMC,KAAK,EAAX;AACA,MAAMC,IAAI;AACRC,cAAU;AADF,GAAV;;AAIA,MAAMC,SAAS,qBAAMF,CAAN,EAASD,EAAT,CAAf;;AAEAF,IAAEM,SAAF,CAAYD,MAAZ,EAAoB,EAApB;AACD,CATD;;AAYA,mBAAK,mDAAL,EAA0D,aAAK;AAC7D,MAAMH,KAAK,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAX;;AAEA,MAAMC,IAAI;AACRC,cAAU;AACRG,SAAG,CADK;AAERC,SAAG,CAFK;AAGRC,SAAG;AAHK;AADF,GAAV;;AAH6D,eAWzC,qBAAMN,CAAN,EAASD,EAAT,CAXyC;AAAA,MAWrDK,CAXqD,UAWrDA,CAXqD;AAAA,MAWlDC,CAXkD,UAWlDA,CAXkD;AAAA,MAW/CC,CAX+C,UAW/CA,CAX+C;;AAa7DT,IAAEC,EAAF,CAAKM,CAAL,EAAQJ,EAAEC,QAAF,CAAWG,CAAnB;AACAP,IAAEC,EAAF,CAAKO,CAAL,EAAQL,EAAEC,QAAF,CAAWI,CAAnB;AACAR,IAAEC,EAAF,CAAKQ,CAAL,EAAQN,EAAEC,QAAF,CAAWK,CAAnB;AACD,CAhBD;;AAkBA,mBAAK,oCAAL,EAA2C,aAAK;AAC9C,MAAMP,KAAK,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAX;;AAEA,MAAMC,IAAI;AACRC,cAAU;AACRG,SAAG,CADK;AAERC,SAAG;AAFK;AADF,GAAV;;AAOAR,IAAEU,MAAF;AAAA,WAAS;AAAA,aAAM,qBAAMP,CAAN,EAASD,EAAT,CAAN;AAAA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA6BS,cAA7B;AACD,CAXD","file":"pluck.spec.js","sourcesContent":["import test from 'ava'\n\nimport pluck from '../../source/map/pluck'\n\nimport {\n  _\n} from '../../source/utils/curry.js'\n\n\ntest('map#pluck: should be curryable', t => {\n  t.is(pluck(_), pluck)\n})\n\n\ntest('map#pluck: should return {} from ks === []', t => {\n  const ks = []\n  const m = {\n    __data__: {}\n  }\n\n  const output = pluck(m, ks)\n\n  t.deepEqual(output, {})\n})\n\n\ntest('map#pluck: should return an Object with ks of map', t => {\n  const ks = [ 'a', 'b', 'c' ]\n\n  const m = {\n    __data__: {\n      a: 1,\n      b: 2,\n      c: 2,\n    }\n  }\n\n  const { a, b, c } = pluck(m, ks)\n\n  t.is(a, m.__data__.a)\n  t.is(b, m.__data__.b)\n  t.is(c, m.__data__.c)\n})\n\ntest('map#pluck: should error on bad key', t => {\n  const ks = [ 'a', 'b', 'c' ]\n\n  const m = {\n    __data__: {\n      a: 1,\n      b: 2,\n    }\n  }\n\n  t.throws(() => pluck(m, ks), ReferenceError)\n})\n"]}