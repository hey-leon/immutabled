{"version":3,"sources":["some.spec.js"],"names":["t","is","f","v","l","__data__","Spy","spy","Array","prototype","some","true","calledWith"],"mappings":";;;;;AAAA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAKA,mBAAK,gCAAL,EAAuC,aAAK;AAC1CA,IAAEC,EAAF,CAAK,6BAAL;AACD,CAFD;;AAKA,mBAAK,yDAAL,EAAgE,aAAK;AAAA;;AACnE,MAAMC,IAAI,SAAJA,CAAI;AAAA,WAAKC,IAAI,CAAT;AAAA,GAAV;AACA,MAAMC,IAAI;AACRC,cAAU,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR;AADF,GAAV;;AAIA,MAAMC,MAAM,gBAAMC,GAAN,CAAUC,MAAMC,SAAN,CAAgBC,IAA1B,EAAgC,MAAhC,CAAZ;;AAEA,sBAAKN,CAAL,EAAQF,CAAR;;AAEAF,IAAEW,IAAF,uBAAO,6CAAIC,UAAJ,YAAe,gDAAEP,QAAjB,yCAA2BH,CAA3B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAXD","file":"some.spec.js","sourcesContent":["import test from 'ava'\n\nimport Sinon from 'sinon'\n\nimport some from '../../source/list/some'\n\nimport {\n  _,\n} from '../../source/utils/curry.js'\n\n\ntest('list#some: should be curryable', t => {\n  t.is(some(_), some)\n})\n\n\ntest('list#some: should call Array.prototype.some w/ __data__', t => {\n  const f = v => v > 0\n  const l = {\n    __data__: [ 1, 2, 3 ],\n  }\n\n  const Spy = Sinon.spy(Array.prototype.some, 'call')\n\n  some(l, f)\n\n  t.true(Spy.calledWith(l.__data__, f))\n})\n"]}